scalar JSONObject

scalar BigInt

type Query {
  # 클러스터 가용구역 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmAvailabilityZonesResponse]
  GetAvailabilityZones(clusterId: BigInt, limit: BigInt, offset: BigInt, sync: Boolean): OpenStackCmAvailabilityZonesResponse
  # 클러스터 가용구역 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterAvailabilityZoneId 클러스터 가용구역 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmAvailabilityZoneResponse]
  GetAvailabliltyZone(clusterId: BigInt, clusterAvailabilityZoneId: BigInt, sync: Boolean): OpenStackCmAvailabilityZoneResponse
  # 클러스터 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmClusterResponse]
  GetCluster(clusterId: BigInt, sync: Boolean): OpenStackCmClusterResponse
  # 클러스터 상태 확인
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @return [OpenStackCmCheckClusterInfoResponse]
  GetClusterStatusCheck(clusterId: BigInt): OpenStackCmCheckClusterInfoResponse
  # 클러스터 동기화 상태 조회
  # 클러스터의 동기화 상태를 조회한다.
  # @param Int clusterId 클러스터 ID
  # @return [OpenStackCmSyncClusterStatusResponse]
  GetClusterSyncStatus(clusterId: BigInt): OpenStackCmSyncClusterStatusResponse
  # 클러스터 목록 조회
  # 설명추가
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param OpenStackCmClusterTypeCodeEnum typeCode 클러스터 종류
  # @param String name 클러스터 이름
  # @param Int ownerGroupId Owner 그룹 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmClustersResponse]
  GetClusters(limit: BigInt, offset: BigInt, typeCode: OpenStackCmClusterTypeCodeEnum, name: String, ownerGroupId: BigInt, sync: Boolean): OpenStackCmClustersResponse
  # Config 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @return [OpenStackCmConfigInfoResponse]
  GetConfig(clusterId: BigInt): OpenStackCmConfigInfoResponse
  # 클러스터 FloatingIP 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterFloatingIpId 클러스터 FloatingIP ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmFloatingIpResponse]
  GetFloatingIp(clusterId: BigInt, clusterFloatingIpId: BigInt, sync: Boolean): OpenStackCmFloatingIpResponse
  # 클러스터 Hypervisor 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterHypervisorId 클러스터 Hypervisor ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmHypervisorResponse]
  GetHypervisor(clusterId: BigInt, clusterHypervisorId: BigInt, sync: Boolean): OpenStackCmHypervisorResponse
  # 클러스터 Hypervisor 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String hostname 클러스터 Hypervisor 호스트네임
  # @param String ipAddress 클러스터 Hypervisor IP 주소
  # @param Int clusterAvailabilityZoneId 클러스터 가용구역 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmHypervisorsResponse]
  GetHypervisors(clusterId: BigInt, limit: BigInt, offset: BigInt, hostname: String, ipAddress: String, clusterAvailabilityZoneId: BigInt, sync: Boolean): OpenStackCmHypervisorsResponse
  # 클러스터 인스턴스 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterInstanceId 클러스터 인스턴스 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmInstanceResponse]
  GetInstance(clusterId: BigInt, clusterInstanceId: BigInt, sync: Boolean): OpenStackCmInstanceResponse
  # 클러스터 인스턴스 Spec 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterInstanceSpecId 클러스터 인스턴스 Spec ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmInstanceSpecResponse]
  GetInstanceSpec(clusterId: BigInt, clusterInstanceSpecId: BigInt, sync: Boolean): OpenStackCmInstanceSpecResponse
  # 클러스터 인스턴스 Spec 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param String name 클러스터 이름
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmInstanceSpecsResponse]
  GetInstanceSpecs(clusterId: BigInt, limit: BigInt, offset: BigInt, uuid: String, name: String, sync: Boolean): OpenStackCmInstanceSpecsResponse
  # 클러스터 인스턴스 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Int clusterHypervisorId 클러스터 Hypervisor ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param Int clusterAvailabilityZoneId 클러스터 가용구역 ID
  # @param Int clusterVolumeId 클러스터 볼륨 ID
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param String name 클러스터 이름
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmInstancesResponse]
  GetInstances(clusterId: BigInt, clusterTenantId: BigInt, clusterHypervisorId: BigInt, limit: BigInt, offset: BigInt, clusterAvailabilityZoneId: BigInt, clusterVolumeId: BigInt, uuid: String, name: String, sync: Boolean): OpenStackCmInstancesResponse
  # 클러스터 KeyPair 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterKeypairId 클러스터 KeyPair ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmKeyPairResponse]
  GetKeypair(clusterId: BigInt, clusterKeypairId: BigInt, sync: Boolean): OpenStackCmKeyPairResponse
  # 클러스터 네트워크 조회
  # cluster_network_id 는 private network 의 id 이다. 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterNetworkId 클러스터 네트워크 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmNetworkResponse]
  GetNetwork(clusterId: BigInt, clusterNetworkId: BigInt, sync: Boolean): OpenStackCmNetworkResponse
  # 클러스터 네트워크 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param Boolean externalOnly 외부 네트워크만 조회
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmNetworksResponse]
  GetNetworks(clusterId: BigInt, clusterTenantId: BigInt, limit: BigInt, offset: BigInt, uuid: String, externalOnly: Boolean, sync: Boolean): OpenStackCmNetworksResponse
  # 공개키 조회
  # 설명추가
  # @return [OpenStackCmPublicKeyResponse]
  GetPublickey: OpenStackCmPublicKeyResponse
  # 클러스터 네트워크 라우터 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterRouterId 클러스터 네트워크 라우터 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmRouterResponse]
  GetRouter(clusterId: BigInt, clusterRouterId: BigInt, sync: Boolean): OpenStackCmRouterResponse
  # 클러스터 네트워크 라우터 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Int clusterNetworkId 클러스터 네트워크 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmRoutersResponse]
  GetRouters(clusterId: BigInt, clusterTenantId: BigInt, clusterNetworkId: BigInt, limit: BigInt, offset: BigInt, uuid: String, sync: Boolean): OpenStackCmRoutersResponse
  # 클러스터 보안그룹 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterSecurityGroupId 클러스터 보안그룹 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmSecurityGroupResponse]
  GetSecurityGroup(clusterId: BigInt, clusterSecurityGroupId: BigInt, sync: Boolean): OpenStackCmSecurityGroupResponse
  # 클러스터 보안그룹 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Int clusterInstanceId 클러스터 인스턴스 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmSecurityGroupsResponse]
  GetSecurityGroups(clusterId: BigInt, clusterTenantId: BigInt, clusterInstanceId: BigInt, limit: BigInt, offset: BigInt, uuid: String, sync: Boolean): OpenStackCmSecurityGroupsResponse
  # 클러스터 볼륨타입 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterStorageId 클러스터 볼륨타입 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmStorageResponse]
  GetStorage(clusterId: BigInt, clusterStorageId: BigInt, sync: Boolean): OpenStackCmStorageResponse
  # 클러스터 볼륨타입 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param OpenStackCmClusterTypeCodeEnum typeCode 클러스터 종류
  # @param String name 클러스터 이름
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmStoragesResponse]
  GetStorages(clusterId: BigInt, limit: BigInt, offset: BigInt, typeCode: OpenStackCmClusterTypeCodeEnum, name: String, sync: Boolean): OpenStackCmStoragesResponse
  # 클러스터 서브넷 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterSubnetId 클러스터 서브넷 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmSubnetResponse]
  GetSubnet(clusterId: BigInt, clusterSubnetId: BigInt, sync: Boolean): OpenStackCmSubnetResponse
  # 클러스터 테넌트 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmTenantResponse]
  GetTenant(clusterId: BigInt, clusterTenantId: BigInt, sync: Boolean): OpenStackCmTenantResponse
  # 클러스터 테넌트 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmTenantsResponse]
  GetTenants(clusterId: BigInt, limit: BigInt, offset: BigInt, uuid: String, sync: Boolean): OpenStackCmTenantsResponse
  # 인스턴스 User Script 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterInstanceId 클러스터 인스턴스 ID
  # @return [OpenStackCmUserScriptResponse]
  GetUserscript(clusterId: BigInt, clusterInstanceId: BigInt): OpenStackCmUserScriptResponse
  # 클러스터 볼륨 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterVolumeId 클러스터 볼륨 ID
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmVolumeResponse]
  GetVolume(clusterId: BigInt, clusterVolumeId: BigInt, sync: Boolean): OpenStackCmVolumeResponse
  # 클러스터 볼륨 목록 조회
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterTenantId 클러스터 테넌트 ID
  # @param Int clusterInstanceId 클러스터 인스턴스 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param Int clusterStorageId 클러스터 볼륨타입 ID
  # @param String uuid 클러스터에서의 테넌트 ID
  # @param String name 클러스터 이름
  # @param Boolean sync 오픈스택 정보 동기화
  # @return [OpenStackCmVolumesResponse]
  GetVolumes(clusterId: BigInt, clusterTenantId: BigInt, clusterInstanceId: BigInt, limit: BigInt, offset: BigInt, clusterStorageId: BigInt, uuid: String, name: String, sync: Boolean): OpenStackCmVolumesResponse
}

type Mutation {
  # 클러스터 연결 확인
  # 설명추가
  # @param OpenStackCmClusterConnectionInfoRequest openStackCmClusterConnectionInfoRequest
  # @return [OpenStackCmMessageResponse]
  CheckClusterConnectionStatus(input: CheckClusterConnectionStatusInput): OpenStackCmMessageResponse
  # 클러스터 등록
  # 설명추가
  # @param OpenStackCmClusterRequest openStackCmClusterRequest
  # @return [OpenStackCmClusterResponse]
  CreateCluster(input: CreateClusterInput): OpenStackCmClusterResponse
  # 클러스터 제거
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @return [OpenStackCmMessageResponse]
  DeleteCluster(input: DeleteClusterInput): OpenStackCmMessageResponse
  # 클러스터 Hypervisor 추가정보 수정
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterHypervisorId 클러스터 Hypervisor ID
  # @param OpenStackCmHypervisorRequest openStackCmHypervisorRequest
  # @return [OpenStackCmHypervisorResponse]
  PutHypervisor(input: PutHypervisorInput): OpenStackCmHypervisorResponse
  # 클러스터 수정
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param OpenStackCmClusterRequest openStackCmClusterRequest
  # @return [OpenStackCmClusterResponse]
  UpdateCluster(input: UpdateClusterInput): OpenStackCmClusterResponse
  # 클러스터 동기화
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @return [OpenStackCmMessageResponse]
  UpdateClusterSync(input: UpdateClusterSyncInput): OpenStackCmMessageResponse
  # 클러스터 상태 예외 서비스
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param OpenStackCmSyncExceptionInfoRequest openStackCmSyncExceptionInfoRequest
  # @return [OpenStackCmMessageResponse]
  UpdateClusterSyncException(input: UpdateClusterSyncExceptionInput): OpenStackCmMessageResponse
  # Config 수정
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param OpenStackCmConfigInfoRequest openStackCmConfigInfoRequest 클러스터의 Config
  # @return [OpenStackCmMessageResponse]
  UpdateConfig(input: UpdateConfigInput): OpenStackCmMessageResponse
  # 인증 정보 수정
  # 클러스터에 연결하기위한 인증 정보 수정
  # @param Int clusterId 클러스터 ID
  # @param OpenStackCmCredentialRequest openStackCmCredentialRequest
  # @return [OpenStackCmMessageResponse]
  UpdateCrendential(input: UpdateCrendentialInput): OpenStackCmMessageResponse
  # 클러스터 볼륨타입 메타데이터 수정
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterStorageId 클러스터 볼륨타입 ID
  # @param OpenStackCmMetadataRequest openStackCmMetadataRequest
  # @return [OpenStackCmMetadataResponse]
  UpdateMetadata(input: UpdateMetadataInput): OpenStackCmMetadataResponse
  # 인스턴스 User Script 수정
  # 설명추가
  # @param Int clusterId 클러스터 ID
  # @param Int clusterInstanceId 클러스터 인스턴스 ID
  # @param OpenStackCmUserScriptRequest openStackCmUserScriptRequest
  # @return [OpenStackCmMessageResponse]
  UpdateUserscript(input: UpdateUserscriptInput): OpenStackCmMessageResponse
}

# cluster_management_api
input CheckClusterConnectionStatusInput {
    openStackCmClusterConnectionInfoRequest: OpenStackCmClusterConnectionInfoRequestInput
}

input CreateClusterInput {
    openStackCmClusterRequest: OpenStackCmClusterRequestInput
}

input DeleteClusterInput {
    # 클러스터 ID
    clusterId: BigInt
}

input PutHypervisorInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터 Hypervisor ID
    clusterHypervisorId: BigInt,
    openStackCmHypervisorRequest: OpenStackCmHypervisorRequestInput
}

input UpdateClusterInput {
    # 클러스터 ID
    clusterId: BigInt,
    openStackCmClusterRequest: OpenStackCmClusterRequestInput
}

input UpdateClusterSyncInput {
    # 클러스터 ID
    clusterId: BigInt
}

input UpdateClusterSyncExceptionInput {
    # 클러스터 ID
    clusterId: BigInt,
    openStackCmSyncExceptionInfoRequest: OpenStackCmSyncExceptionInfoRequestInput
}

input UpdateConfigInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터의 Config
    openStackCmConfigInfoRequest: OpenStackCmConfigInfoRequestInput
}

input UpdateCrendentialInput {
    # 클러스터 ID
    clusterId: BigInt,
    openStackCmCredentialRequest: OpenStackCmCredentialRequestInput
}

input UpdateMetadataInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터 볼륨타입 ID
    clusterStorageId: BigInt,
    openStackCmMetadataRequest: OpenStackCmMetadataRequestInput
}

input UpdateUserscriptInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터 인스턴스 ID
    clusterInstanceId: BigInt,
    openStackCmUserScriptRequest: OpenStackCmUserScriptRequestInput
}

#
# cloud_tenant.graphql
#
# 테넌트
type CloudTenant {
  # 테넌트 ID
  id: BigInt
  # 테넌트 이름
  name: String
  # 사용여부
  use_flag: Boolean
  # 테넌트가 사용할 수 있는 솔루션 목록
  solutions: [CloudTenantSolution]
  # 비고
  remarks: String
  # 테넌트 생성 날짜
  created_at: BigInt
  # 테넌트 변경 날짜
  updated_at: BigInt
}

input CloudTenantInput {
    # 테넌트 ID
    id: BigInt
    # 테넌트 이름
    name: String
    # 사용여부
    use_flag: Boolean
    # 테넌트가 사용할 수 있는 솔루션 목록
    solutions: [CloudTenantSolutionInput]
    # 비고
    remarks: String
    # 테넌트 생성 날짜
    created_at: BigInt
    # 테넌트 변경 날짜
    updated_at: BigInt
}

#
# cloud_tenant_solution.graphql
#
# 테넌트
type CloudTenantSolution {
  # 솔루션 이름
  name: String
}

input CloudTenantSolutionInput {
    # 솔루션 이름
    name: String
}

#
# cloud_user_group.graphql
#
# 사용자 그룹
type CloudUserGroup {
  # 사용자 그룹 ID
  id: BigInt
  tenant: CloudTenant
  # 사용자 그룹 이름
  name: String
  # 비고
  remarks: String
  # 사용자 그룹 생성 날짜
  created_at: BigInt
  # 사용자 그룹 변경 날짜
  updated_at: BigInt
  # 삭제 여부
  delete_flag: Boolean
}

input CloudUserGroupInput {
    # 사용자 그룹 ID
    id: BigInt
    tenant: CloudTenantInput
    # 사용자 그룹 이름
    name: String
    # 비고
    remarks: String
    # 사용자 그룹 생성 날짜
    created_at: BigInt
    # 사용자 그룹 변경 날짜
    updated_at: BigInt
    # 삭제 여부
    delete_flag: Boolean
}

#
# open_stack_cm_availability_zone_response.graphql
#
type OpenStackCmAvailabilityZoneResponse {
  availability_zone: OpenStackCmAvailabilityZoneResponseAvailabilityZone
  message: OpenStackCmMessage
}

input OpenStackCmAvailabilityZoneResponseInput {
    availability_zone: OpenStackCmAvailabilityZoneResponseAvailabilityZoneInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_availability_zone_response_availability_zone.graphql
#
type OpenStackCmAvailabilityZoneResponseAvailabilityZone {
  # 가용구역의 Hypervisor 목록
  hypervisors: [OpenStackCmClusterHypervisor]
  # 클러스터 가용구역의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  # 클러스터 가용구역의 이름
  name: String
  # 가용구역의 가용여부
  available: Boolean
}

input OpenStackCmAvailabilityZoneResponseAvailabilityZoneInput {
    # 가용구역의 Hypervisor 목록
    hypervisors: [OpenStackCmClusterHypervisorInput]
    # 클러스터 가용구역의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    # 클러스터 가용구역의 이름
    name: String
    # 가용구역의 가용여부
    available: Boolean
}

#
# open_stack_cm_availability_zones_response.graphql
#
type OpenStackCmAvailabilityZonesResponse {
  availability_zones: [OpenStackCmClusterAvailabilityZone]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmAvailabilityZonesResponseInput {
    availability_zones: [OpenStackCmClusterAvailabilityZoneInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_check_cluster_info_response.graphql
#
type OpenStackCmCheckClusterInfoResponse {
  computes: [OpenStackCmCompute]
  storages: [OpenStackCmStorage]
  networks: [OpenStackCmNetwork]
  status: OpenStackCmClusterStateCodeEnum
  # 클러스터 storage, compute, network 종합 상태
  updated_at: String
  # 클러스터 compute 가 nil 값을 반환할때 발생한 에러
  compute_error: String
  # 클러스터 storage 가 nil 값을 반환할때 발생한 에러
  storage_error: String
  # 클러스터 network 가 nil 값을 반환할때 발생한 에러
  network_error: String
  message: OpenStackCmMessage
}

input OpenStackCmCheckClusterInfoResponseInput {
    computes: [OpenStackCmComputeInput]
    storages: [OpenStackCmStorageInput]
    networks: [OpenStackCmNetworkInput]
    status: OpenStackCmClusterStateCodeEnum
    # 클러스터 storage, compute, network 종합 상태
    updated_at: String
    # 클러스터 compute 가 nil 값을 반환할때 발생한 에러
    compute_error: String
    # 클러스터 storage 가 nil 값을 반환할때 발생한 에러
    storage_error: String
    # 클러스터 network 가 nil 값을 반환할때 발생한 에러
    network_error: String
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_cluster.graphql
#
# 클러스터
type OpenStackCmCluster {
  # 클러스터의 ID
  id: BigInt
  owner_group: CloudUserGroup
  permissions: [OpenStackCmClusterPermission]
  # 클러스터의 이름
  name: String
  state_code: OpenStackCmClusterStateCodeEnum
  type_code: OpenStackCmClusterTypeCodeEnum
  # 클러스터의 API Server URL
  api_server_url: String
  # 클러스터의 API Credential의 암호문 ## Openstack **password authentication:** ```json {   \"methods\": [\"password\"],   \"password\": {     \"user\": {       \"name\": \"admin\",       \"domain\": {         \"name\": \"admin\"       },       \"password\": \"password\"     }   } } ```
  credential: String
  # 비고
  remarks: String
  # 클러스터 등록 일시 (Timestamp)
  created_at: BigInt
  # 클러스터 최종 수정 일시 (Timestamp)
  updated_at: BigInt
  # 클러스터 최종 동기화 일시 (Timestamp)
  synchronized_at: BigInt
}

input OpenStackCmClusterInput {
    # 클러스터의 ID
    id: BigInt
    owner_group: CloudUserGroupInput
    permissions: [OpenStackCmClusterPermissionInput]
    # 클러스터의 이름
    name: String
    state_code: OpenStackCmClusterStateCodeEnum
    type_code: OpenStackCmClusterTypeCodeEnum
    # 클러스터의 API Server URL
    api_server_url: String
    # 클러스터의 API Credential의 암호문 ## Openstack **password authentication:** ```json {   \"methods\": [\"password\"],   \"password\": {     \"user\": {       \"name\": \"admin\",       \"domain\": {         \"name\": \"admin\"       },       \"password\": \"password\"     }   } } ```
    credential: String
    # 비고
    remarks: String
    # 클러스터 등록 일시 (Timestamp)
    created_at: BigInt
    # 클러스터 최종 수정 일시 (Timestamp)
    updated_at: BigInt
    # 클러스터 최종 동기화 일시 (Timestamp)
    synchronized_at: BigInt
}

#
# open_stack_cm_cluster_availability_zone.graphql
#
# 클러스터 가용구역
type OpenStackCmClusterAvailabilityZone {
  # 클러스터 가용구역의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  # 클러스터 가용구역의 이름
  name: String
  # 가용구역의 가용여부
  available: Boolean
}

input OpenStackCmClusterAvailabilityZoneInput {
    # 클러스터 가용구역의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    # 클러스터 가용구역의 이름
    name: String
    # 가용구역의 가용여부
    available: Boolean
}

#
# open_stack_cm_cluster_config.graphql
#
# 클러스터 Config 정보
type OpenStackCmClusterConfig {
  # Health Check Interval
  timestamp_interval: BigInt
  # Reserved Sync Interval
  reserved_sync_interval: BigInt
}

input OpenStackCmClusterConfigInput {
    # Health Check Interval
    timestamp_interval: BigInt
    # Reserved Sync Interval
    reserved_sync_interval: BigInt
}

#
# open_stack_cm_cluster_connection_info_request.graphql
#
# 클러스터 접속정보
type OpenStackCmClusterConnectionInfoRequest {
  type_code: OpenStackCmClusterTypeCodeEnum
  # 클러스터의 API Server URL
  api_server_url: String
  # 클러스터의 API Credential
  credential: String
}

input OpenStackCmClusterConnectionInfoRequestInput {
    type_code: OpenStackCmClusterTypeCodeEnum
    # 클러스터의 API Server URL
    api_server_url: String
    # 클러스터의 API Credential
    credential: String
}

#
# open_stack_cm_cluster_floating_ip.graphql
#
# 클러스터 Floating IP
type OpenStackCmClusterFloatingIp {
  # 클러스터 Floating IP 의 ID
  id: BigInt
  # 클러스터에서의 Floating IP ID
  uuid: String
  # 클러스터 Floating IP 의 설명
  description: String
  # IP 주소
  ip_address: String
  status: OpenStackCmClusterFloatingIpStatusEnum
}

input OpenStackCmClusterFloatingIpInput {
    # 클러스터 Floating IP 의 ID
    id: BigInt
    # 클러스터에서의 Floating IP ID
    uuid: String
    # 클러스터 Floating IP 의 설명
    description: String
    # IP 주소
    ip_address: String
    status: OpenStackCmClusterFloatingIpStatusEnum
}

#
# open_stack_cm_cluster_floating_ip_status_enum.graphql
#
# 상태
enum OpenStackCmClusterFloatingIpStatusEnum {
  ACTIVE
  DOWN
  ERROR
}

#
# open_stack_cm_cluster_hypervisor.graphql
#
# 클러스터 Hypervisor
type OpenStackCmClusterHypervisor {
  # 클러스터 Hypervisor 의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  availability_zone: OpenStackCmClusterAvailabilityZone
  # 클러스터에서의 Hypervisor ID
  uuid: String
  type_code: OpenStackCmClusterHypervisorTypeCodeEnum
  # 클러스터 Hypervisor 의 호스트네임
  hostname: String
  # 클러스터 Hypervisor 의 IP 주소
  ip_address: String
  # 클러스터 Hypervisor 의 CPU 코어 갯수 (core)
  vcpu_total_cnt: BigInt
  # 클러스터 Hypervisor 의 사용중인 VCPU 갯수
  vcpu_used_cnt: BigInt
  # 클러스터 Hypervisor 의 총 메모리 용량 (bytes)
  mem_total_bytes: BigInt
  # 클러스터 Hypervisor 의 사용중인 메모리 용량 (bytes)
  mem_used_bytes: BigInt
  # 클러스터 Hypervisor 의 총 디스크 용량 (bytes)
  disk_total_bytes: BigInt
  # 클러스터 Hypervisor 의 사용중인 디스크 용량 (bytes)
  disk_used_bytes: BigInt
  status: OpenStackCmClusterHypervisorStatusEnum
  state: OpenStackCmClusterHypervisorStateEnum
  # 클러스터 Hypervisor SSH 접속 Port
  ssh_port: BigInt
  # 클러스터 Hypervisor SSH 접속 Account
  ssh_account: String
  # 클러스터 Hypervisor SSH 접속 Password
  ssh_password: String
  # Agent Bind Port
  agent_port: BigInt
  # Agent 버전
  agent_version: String
  # Agemt 최초 설치 일시 (Timestamp)
  agent_installed_at: BigInt
  # Agemt 최종 업데이트 일시 (Timestamp)
  agent_last_upgraded_at: BigInt
}

input OpenStackCmClusterHypervisorInput {
    # 클러스터 Hypervisor 의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    availability_zone: OpenStackCmClusterAvailabilityZoneInput
    # 클러스터에서의 Hypervisor ID
    uuid: String
    type_code: OpenStackCmClusterHypervisorTypeCodeEnum
    # 클러스터 Hypervisor 의 호스트네임
    hostname: String
    # 클러스터 Hypervisor 의 IP 주소
    ip_address: String
    # 클러스터 Hypervisor 의 CPU 코어 갯수 (core)
    vcpu_total_cnt: BigInt
    # 클러스터 Hypervisor 의 사용중인 VCPU 갯수
    vcpu_used_cnt: BigInt
    # 클러스터 Hypervisor 의 총 메모리 용량 (bytes)
    mem_total_bytes: BigInt
    # 클러스터 Hypervisor 의 사용중인 메모리 용량 (bytes)
    mem_used_bytes: BigInt
    # 클러스터 Hypervisor 의 총 디스크 용량 (bytes)
    disk_total_bytes: BigInt
    # 클러스터 Hypervisor 의 사용중인 디스크 용량 (bytes)
    disk_used_bytes: BigInt
    status: OpenStackCmClusterHypervisorStatusEnum
    state: OpenStackCmClusterHypervisorStateEnum
    # 클러스터 Hypervisor SSH 접속 Port
    ssh_port: BigInt
    # 클러스터 Hypervisor SSH 접속 Account
    ssh_account: String
    # 클러스터 Hypervisor SSH 접속 Password
    ssh_password: String
    # Agent Bind Port
    agent_port: BigInt
    # Agent 버전
    agent_version: String
    # Agemt 최초 설치 일시 (Timestamp)
    agent_installed_at: BigInt
    # Agemt 최종 업데이트 일시 (Timestamp)
    agent_last_upgraded_at: BigInt
}

#
# open_stack_cm_cluster_hypervisor_state_enum.graphql
#
# Hypervisor 상태
enum OpenStackCmClusterHypervisorStateEnum {
  UP
  DOWN
  UNKNOWN
}

#
# open_stack_cm_cluster_hypervisor_status_enum.graphql
#
# Hypervisor 상태
enum OpenStackCmClusterHypervisorStatusEnum {
  ENABLED
  DISABLED
  UNKNOWN
}

#
# open_stack_cm_cluster_hypervisor_type_code_enum.graphql
#
# 클러스터 Hypervisor 의 종류
enum OpenStackCmClusterHypervisorTypeCodeEnum {
  KVM
  LXC
  QEMU
  UML
  VMWARE
  XEN
  XENSERVER
  HYPER_V
  VIRTUOZZO
}

#
# open_stack_cm_cluster_instance.graphql
#
# 클러스터 인스턴스
type OpenStackCmClusterInstance {
  # 클러스터 인스턴스의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  availability_zone: OpenStackCmClusterAvailabilityZone
  hypervisor: OpenStackCmClusterHypervisor
  # 클러스터에서의 인스턴스 ID
  uuid: String
  # 클러스터 인스턴스의 이름
  name: String
  # 클러스터 인스턴스의 설명
  description: String
  status: OpenStackCmClusterInstanceStatusEnum
  state: OpenStackCmClusterInstanceStateEnum
  keypair: OpenStackCmClusterKeyPair
  spec: OpenStackCmClusterInstanceSpec
  # 인스턴스의 네트워크 목록
  networks: [OpenStackCmClusterInstanceNetwork]
  # 인스턴스의 네트워크들과 연결된 라우터 목록
  routers: [OpenStackCmClusterRouter]
  # 인스턴스의 보안그룹 목록
  security_groups: [OpenStackCmClusterInstanceSecurityGroup]
  # 인스턴스의 볼륨 목록
  volumes: [OpenStackCmClusterInstanceVolume]
}

input OpenStackCmClusterInstanceInput {
    # 클러스터 인스턴스의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    availability_zone: OpenStackCmClusterAvailabilityZoneInput
    hypervisor: OpenStackCmClusterHypervisorInput
    # 클러스터에서의 인스턴스 ID
    uuid: String
    # 클러스터 인스턴스의 이름
    name: String
    # 클러스터 인스턴스의 설명
    description: String
    status: OpenStackCmClusterInstanceStatusEnum
    state: OpenStackCmClusterInstanceStateEnum
    keypair: OpenStackCmClusterKeyPairInput
    spec: OpenStackCmClusterInstanceSpecInput
    # 인스턴스의 네트워크 목록
    networks: [OpenStackCmClusterInstanceNetworkInput]
    # 인스턴스의 네트워크들과 연결된 라우터 목록
    routers: [OpenStackCmClusterRouterInput]
    # 인스턴스의 보안그룹 목록
    security_groups: [OpenStackCmClusterInstanceSecurityGroupInput]
    # 인스턴스의 볼륨 목록
    volumes: [OpenStackCmClusterInstanceVolumeInput]
}

#
# open_stack_cm_cluster_instance_extra_spec.graphql
#
# 클러스터 인스턴스 Extra Specification
type OpenStackCmClusterInstanceExtraSpec {
  key: OpenStackCmClusterInstanceExtraSpecKeyEnum
  # Extra Specification 의 Value
  value: String
}

input OpenStackCmClusterInstanceExtraSpecInput {
    key: OpenStackCmClusterInstanceExtraSpecKeyEnum
    # Extra Specification 의 Value
    value: String
}

#
# open_stack_cm_cluster_instance_extra_spec_key_enum.graphql
#
# Extra Specification 의 Key  **CPU limits:** - quota:cpu_shares - Specifies the proportional weighted share for the domain. If this element is omitted, the service defaults to the OS provided defaults. There is no unit for the value; it is a relative measure based on the setting of other VMs. For example, a VM configured with value 2048 gets twice as much CPU time as a VM configured with value 1024. - quota:cpu_shares_level - On VMware, specifies the allocation level. Can be custom, high, normal, or low. If you choose custom, set the number of shares using cpu_shares_share. - quota:cpu_period - Specifies the enforcement interval (unit: microseconds) for QEMU and LXC hypervisors. Within a period, each VCPU of the domain is not allowed to consume more than the quota worth of runtime. The value should be in range [1000, 1000000]. A period with value 0 means no value. - quota:cpu_limit - Specifies the upper limit for VMware machine CPU allocation in MHz. This parameter ensures that a machine never uses more than the defined amount of CPU time. It can be used to enforce a limit on the machine's CPU performance. - quota:cpu_reservation - Specifies the guaranteed minimum CPU reservation in MHz for VMware. This means that if needed, the machine will definitely get allocated the reserved amount of CPU cycles. - quota:cpu_quota - Specifies the maximum allowed bandwidth (unit: microseconds). A domain with a negative-value quota indicates that the domain has infinite bandwidth, which means that it is not bandwidth controlled. The value should be in range [1000, 18446744073709551] or less than 0. A quota with value 0 means no value. You can use this feature to ensure that all vCPUs run at the same speed.  **Memory limits:** - quota:memory_limit - Specifies the upper limit for VMware machine memory allocation in MB. The utilization of a virtual machine will not exceed this limit, even if there are available resources. This is typically used to ensure a consistent performance of virtual machines independent of available resources. - quota:memory_reservation - Specifies the guaranteed minimum memory reservation in MB for VMware. This means the specified amount of memory will definitely be allocated to the machine. - quota:memory_shares_level - On VMware, specifies the allocation level. This can be custom, high, normal or low. If you choose custom, set the number of shares using memory_shares_share. - quota:memory_shares_share - Specifies the number of shares allocated in the event that custom is used. There is no unit for this value. It is a relative measure based on the settings for other VMs.  **Disk I/O limits:** - quota:disk_io_limit - Specifies the upper limit for disk utilization in I/O per second. The utilization of a virtual machine will not exceed this limit, even if there are available resources. The default value is -1 which indicates unlimited usage. - quota:disk_io_reservation - Specifies the guaranteed minimum disk allocation in terms of Input/output Operations Per Second (IOPS). - quota:disk_io_shares_level - Specifies the allocation level. This can be custom, high, normal or low. If you choose custom, set the number of shares using disk_io_shares_share. - quota:disk_io_shares_share - Specifies the number of shares allocated in the event that custom is used. When there is resource contention, this value is used to determine the resource allocation.  **Disk tuning:** - quota:disk_read_bytes_sec - quota:disk_read_iops_sec - quota:disk_write_bytes_sec - quota:disk_write_iops_sec - quota:disk_total_bytes_sec - quota:disk_total_iops_sec  **Bandwidth I/O:** - quota:vif_inbound_average - quota:vif_inbound_burst - quota:vif_inbound_peak - quota:vif_outbound_average - quota:vif_outbound_burst - quota:vif_outbound_peak  **Watchdog behavior:** - hw:watchdog_action  **Random-number generator:** - hw_rng:rate-allowed - hw_rng:rate_bytes - hw_rng:rate_period  **CPU topology:** - hw:cpu_sockets - hw:cpu_cores - hw:cpu_threads - hw:cpu_max_sockets - hw:cpu_max_cores - hw:cpu_max_threads  **CPU pinning policy:** - hw:cpu_policy - hw:cpu_thread_policy  **NUMA topology:** - hw:numa_nodes - hw:numa_cpus.N - hw:numa_mem.N  **Large pages allocation:** - hw:mem_page_size  **PCI passthrough:** - pci_passthrough:alias  **Secure Boot:** - os:secure_boot
enum OpenStackCmClusterInstanceExtraSpecKeyEnum {
  QUOTA_CPU_SHARES
  QUOTA_CPU_SHARES_LEVEL
  QUOTA_CPU_PERIOD
  QUOTA_CPU_LIMIT
  QUOTA_CPU_RESERVATION
  QUOTA_CPU_QUOTA
  QUOTA_MEMORY_LIMIT
  QUOTA_MEMORY_RESERVATION
  QUOTA_MEMORY_SHARES_LEVEL
  QUOTA_MEMORY_SHARES_SHARE
  QUOTA_DISK_IO_LIMIT
  QUOTA_DISK_IO_RESERVATION
  QUOTA_DISK_IO_SHARES_LEVEL
  QUOTA_DISK_IO_SHARES_SHARE
  QUOTA_DISK_READ_BYTES_SEC
  QUOTA_DISK_READ_IOPS_SEC
  QUOTA_DISK_WRITE_BYTES_SEC
  QUOTA_DISK_WRITE_IOPS_SEC
  QUOTA_DISK_TOTAL_BYTES_SEC
  QUOTA_DISK_TOTAL_IOPS_SEC
  QUOTA_VIF_INBOUND_AVERAGE
  QUOTA_VIF_INBOUND_BURST
  QUOTA_VIF_INBOUND_PEAK
  QUOTA_VIF_OUTBOUND_AVERAGE
  QUOTA_VIF_OUTBOUND_BURST
  QUOTA_VIF_OUTBOUND_PEAK
  HW_WATCHDOG_ACTION
  HW_RNG_RATE_ALLOWED
  HW_RNG_RATE_BYTES
  HW_RNG_RATE_PERIOD
  HW_CPU_SOCKETS
  HW_CPU_CORES
  HW_CPU_THREADS
  HW_CPU_MAX_SOCKETS
  HW_CPU_MAX_CORES
  HW_CPU_MAX_THREADS
  HW_CPU_POLICY
  HW_CPU_THREAD_POLICY
  HW_NUMA_NODES
  HW_NUMA_CPUS__N
  HW_NUMA_MEM__N
  HW_MEM_PAGE_SIZE
  PCI_PASSTHROUGH_ALIAS
  OS_SECURE_BOOT
}

#
# open_stack_cm_cluster_instance_network.graphql
#
# 클러스터 인스턴스의 네트워크
type OpenStackCmClusterInstanceNetwork {
  # 인스턴스 네트워크의 ID
  id: BigInt
  network: OpenStackCmClusterNetwork
  subnet: OpenStackCmClusterSubnet
  floating_ip: OpenStackCmClusterFloatingIp
  # DHCP 여부
  dhcp_flag: Boolean
  # IP 주소
  ip_address: String
}

input OpenStackCmClusterInstanceNetworkInput {
    # 인스턴스 네트워크의 ID
    id: BigInt
    network: OpenStackCmClusterNetworkInput
    subnet: OpenStackCmClusterSubnetInput
    floating_ip: OpenStackCmClusterFloatingIpInput
    # DHCP 여부
    dhcp_flag: Boolean
    # IP 주소
    ip_address: String
}

#
# open_stack_cm_cluster_instance_security_group.graphql
#
type OpenStackCmClusterInstanceSecurityGroup {
  # 클러스터 보안그룹의 규칙 목록
  rules: [OpenStackCmClusterSecurityGroupRule]
  # 클러스터 보안그룹의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  # 클러스터에서의 보안그룹 ID
  uuid: String
  # 클러스터 보안그룹의 이름
  name: String
  # 클러스터 보안그룹의 설명
  description: String
}

input OpenStackCmClusterInstanceSecurityGroupInput {
    # 클러스터 보안그룹의 규칙 목록
    rules: [OpenStackCmClusterSecurityGroupRuleInput]
    # 클러스터 보안그룹의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    # 클러스터에서의 보안그룹 ID
    uuid: String
    # 클러스터 보안그룹의 이름
    name: String
    # 클러스터 보안그룹의 설명
    description: String
}

#
# open_stack_cm_cluster_instance_spec.graphql
#
# 클러스터 인스턴스 Specification
type OpenStackCmClusterInstanceSpec {
  # Specification 의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  # 클러스터에서의 Specification ID
  uuid: String
  # Specification 의 이름
  name: String
  # Specification 의 설명
  description: String
  # VCPU 코어 수 (core)
  vcpu_total_cnt: BigInt
  # 메모리 용량 (bytes)
  mem_total_bytes: BigInt
  # 디스크 용량 (bytes)
  disk_total_bytes: BigInt
  # 스왑 영역 (bytes)
  swap_total_bytes: BigInt
  # 임시 영역 (bytes)
  ephemeral_total_bytes: BigInt
  # Extra Specifications
  extra_specs: [OpenStackCmClusterInstanceExtraSpec]
}

input OpenStackCmClusterInstanceSpecInput {
    # Specification 의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    # 클러스터에서의 Specification ID
    uuid: String
    # Specification 의 이름
    name: String
    # Specification 의 설명
    description: String
    # VCPU 코어 수 (core)
    vcpu_total_cnt: BigInt
    # 메모리 용량 (bytes)
    mem_total_bytes: BigInt
    # 디스크 용량 (bytes)
    disk_total_bytes: BigInt
    # 스왑 영역 (bytes)
    swap_total_bytes: BigInt
    # 임시 영역 (bytes)
    ephemeral_total_bytes: BigInt
    # Extra Specifications
    extra_specs: [OpenStackCmClusterInstanceExtraSpecInput]
}

#
# open_stack_cm_cluster_instance_state_enum.graphql
#
# 인스턴스 전원 상태 - 0: NOSTATE - 1: RUNNING - 3: PAUSED - 4: SHUTDOWN - 6: CRASHED - 7: SUSPENDED
enum OpenStackCmClusterInstanceStateEnum {
  NOSTATE
  RUNNING
  PAUSED
  SHUTDOWN
  CRASHED
  SUSPENDED
}

#
# open_stack_cm_cluster_instance_status_enum.graphql
#
# 인스턴스 상태 - ACTIVE: The server is active. - BUILD: The server has not yet finished the original build process. - DELETED: The server is deleted. - ERROR: The server is in error. - HARD_REBOOT: The server is hard rebooting. This is equivalent to pulling the power plug on a physical server, plugging it back in, and rebooting it. - MIGRATING: The server is migrating. This is caused by a live migration (moving a server that is active) action. - PASSWORD: The password is being reset on the server. - PAUSED: The server is paused. - REBOOT: The server is in a soft reboot state. A reboot command was passed to the operating system. - REBUILD: The server is currently being rebuilt from an image. - RESCUE: The server is in rescue mode. - RESIZE: Server is performing the differential copy of data that changed during its initial copy. Server is down for this stage. - REVERT_RESIZE: The resize or migration of a server failed for some reason. The destination server is being cleaned up and the original source server is restarting. - SHELVED: The server is in shelved state. Depends on the shelve offload time, the server will be automatically shelved off loaded. - SHELVED_OFFLOADED: The shelved server is offloaded (removed from the compute host) and it needs unshelved action to be used again. - SHUTOFF: The server was powered down by the user, either through the OpenStack Compute API or from within the server. For example, the user issued a shutdown -h command from within the server. If the OpenStack Compute manager detects that the VM was powered down, it transitions the server to the SHUTOFF status. - SOFT_DELETED: The server is marked as deleted but will remain in the cloud for some configurable amount of time. While soft-deleted, an authorized user can restore the server back to normal state. When the time expires, the server will be deleted permanently. - SUSPENDED: The server is suspended, either by request or necessity. See the feature support matrix for supported compute drivers. When you suspend a server, its state is stored on disk, all memory is written to disk, and the server is stopped. Suspending a server is similar to placing a device in hibernation and its occupied resource will not be freed but rather kept for when the server is resumed. If an instance is infrequently used and the occupied resource needs to be freed to create other servers, it should be shelved. - UNKNOWN: The state of the server is unknown. It could be because a part of the infrastructure is temporarily down (see Handling Down Cells for more information). Contact your cloud provider. - VERIFY_RESIZE: System is awaiting confirmation that the server is operational after a move or resize.
enum OpenStackCmClusterInstanceStatusEnum {
  ACTIVE
  BUILD
  DELETED
  ERROR
  HARD_REBOOT
  MIGRATING
  PASSWORD
  PAUSED
  REBOOT
  REBUILD
  RESCUE
  RESIZE
  REVERT_RESIZE
  SHELVED
  SHELVED_OFFLOADED
  SHUTOFF
  SOFT_DELETED
  SUSPENDED
  UNKNOWN
  VERIFY_RESIZE
}

#
# open_stack_cm_cluster_instance_volume.graphql
#
# 클러스터 인스턴스의 볼륨
type OpenStackCmClusterInstanceVolume {
  storage: OpenStackCmClusterStorage
  volume: OpenStackCmClusterVolume
  # 디바이스 경로
  device_path: String
  # 부팅 순서
  boot_index: BigInt
}

input OpenStackCmClusterInstanceVolumeInput {
    storage: OpenStackCmClusterStorageInput
    volume: OpenStackCmClusterVolumeInput
    # 디바이스 경로
    device_path: String
    # 부팅 순서
    boot_index: BigInt
}

#
# open_stack_cm_cluster_key_pair.graphql
#
# 클러스터 KeyPair
type OpenStackCmClusterKeyPair {
  # KeyPair 의 ID
  id: BigInt
  # KeyPair 의 이름
  name: String
  # KeyPair 의 fingerprint
  fingerprint: String
  # KeyPair 의 public key
  public_key: String
  type_code: OpenStackCmClusterKeyPairTypeCodeEnum
}

input OpenStackCmClusterKeyPairInput {
    # KeyPair 의 ID
    id: BigInt
    # KeyPair 의 이름
    name: String
    # KeyPair 의 fingerprint
    fingerprint: String
    # KeyPair 의 public key
    public_key: String
    type_code: OpenStackCmClusterKeyPairTypeCodeEnum
}

#
# open_stack_cm_cluster_key_pair_type_code_enum.graphql
#
# KeyPair 의 타입
enum OpenStackCmClusterKeyPairTypeCodeEnum {
  SSH
  X509
}

#
# open_stack_cm_cluster_network.graphql
#
# 클러스터 네트워크
type OpenStackCmClusterNetwork {
  # 클러스터 네트워크의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  type_code: OpenStackCmClusterNetworkTypeCodeEnum
  # 클러스터에서의 네트워크 ID
  uuid: String
  # 클러스터 네트워크의 이름
  name: String
  # 클러스터 네트워크의 설명
  description: String
  # 외부 네트워크 여부
  external_flag: Boolean
  status: OpenStackCmClusterNetworkStatusEnum
  state: OpenStackCmClusterNetworkStateEnum
  # 서브넷 목록
  subnets: [OpenStackCmClusterSubnet]
  # FloatingIP 목록
  floating_ips: [OpenStackCmClusterFloatingIp]
}

input OpenStackCmClusterNetworkInput {
    # 클러스터 네트워크의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    type_code: OpenStackCmClusterNetworkTypeCodeEnum
    # 클러스터에서의 네트워크 ID
    uuid: String
    # 클러스터 네트워크의 이름
    name: String
    # 클러스터 네트워크의 설명
    description: String
    # 외부 네트워크 여부
    external_flag: Boolean
    status: OpenStackCmClusterNetworkStatusEnum
    state: OpenStackCmClusterNetworkStateEnum
    # 서브넷 목록
    subnets: [OpenStackCmClusterSubnetInput]
    # FloatingIP 목록
    floating_ips: [OpenStackCmClusterFloatingIpInput]
}

#
# open_stack_cm_cluster_network_routing_interface.graphql
#
# 네트워크 라우터의 라우팅 인터페이스
type OpenStackCmClusterNetworkRoutingInterface {
  network: OpenStackCmClusterNetwork
  subnet: OpenStackCmClusterSubnet
  # 라우팅 인터페이스의 IP 주소
  ip_address: String
}

input OpenStackCmClusterNetworkRoutingInterfaceInput {
    network: OpenStackCmClusterNetworkInput
    subnet: OpenStackCmClusterSubnetInput
    # 라우팅 인터페이스의 IP 주소
    ip_address: String
}

#
# open_stack_cm_cluster_network_state_enum.graphql
#
# 네트워크 상태
enum OpenStackCmClusterNetworkStateEnum {
  UP
  DOWN
}

#
# open_stack_cm_cluster_network_status_enum.graphql
#
# 네트워크 상태
enum OpenStackCmClusterNetworkStatusEnum {
  ACTIVE
  DOWN
  BUILD
  ERROR
}

#
# open_stack_cm_cluster_network_type_code_enum.graphql
#
# 네트워크 타입
enum OpenStackCmClusterNetworkTypeCodeEnum {
  VLAN
  VXLAN
  GRE
  FLAT
  LOCAL
  GENEVE
}

#
# open_stack_cm_cluster_permission.graphql
#
# 클러스터 권한
type OpenStackCmClusterPermission {
  group: CloudUserGroup
  mode_code: OpenStackCmClusterPermissionModeCodeEnum
}

input OpenStackCmClusterPermissionInput {
    group: CloudUserGroupInput
    mode_code: OpenStackCmClusterPermissionModeCodeEnum
}

#
# open_stack_cm_cluster_permission_mode_code_enum.graphql
#
# 클러스터 권한 모드
enum OpenStackCmClusterPermissionModeCodeEnum {
  CLUSTER_PERMISSION_MODE_READONLY
  CLUSTER_PERMISSION_MODE_READWRITE
}

#
# open_stack_cm_cluster_request.graphql
#
# 클러스터
type OpenStackCmClusterRequest {
  cluster: OpenStackCmCluster
}

input OpenStackCmClusterRequestInput {
    cluster: OpenStackCmClusterInput
}

#
# open_stack_cm_cluster_response.graphql
#
type OpenStackCmClusterResponse {
  cluster: OpenStackCmCluster
  message: OpenStackCmMessage
}

input OpenStackCmClusterResponseInput {
    cluster: OpenStackCmClusterInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_cluster_router.graphql
#
# 클러스터 네트워크 라우터
type OpenStackCmClusterRouter {
  # 클러스터 네트워크 라우터의 ID
  id: BigInt
  tenant: OpenStackCmClusterTenant
  # 클러스터에서의 네트워크 라우터 ID
  uuid: String
  # 클러스터 라우터의 이름
  name: String
  # 클러스터 라우터의 설명
  description: String
  # 내부 네트워크로의 라우팅 인터페이스 목록
  internal_routing_interfaces: [OpenStackCmClusterNetworkRoutingInterface]
  # 외부 네트워크로의 라우팅 인터페이스 목록
  external_routing_interfaces: [OpenStackCmClusterNetworkRoutingInterface]
  # 추가 라우트 목록
  extra_routes: [OpenStackCmClusterRouterExtraRoute]
  status: OpenStackCmClusterRouterStatusEnum
  state: OpenStackCmClusterRouterStateEnum
}

input OpenStackCmClusterRouterInput {
    # 클러스터 네트워크 라우터의 ID
    id: BigInt
    tenant: OpenStackCmClusterTenantInput
    # 클러스터에서의 네트워크 라우터 ID
    uuid: String
    # 클러스터 라우터의 이름
    name: String
    # 클러스터 라우터의 설명
    description: String
    # 내부 네트워크로의 라우팅 인터페이스 목록
    internal_routing_interfaces: [OpenStackCmClusterNetworkRoutingInterfaceInput]
    # 외부 네트워크로의 라우팅 인터페이스 목록
    external_routing_interfaces: [OpenStackCmClusterNetworkRoutingInterfaceInput]
    # 추가 라우트 목록
    extra_routes: [OpenStackCmClusterRouterExtraRouteInput]
    status: OpenStackCmClusterRouterStatusEnum
    state: OpenStackCmClusterRouterStateEnum
}

#
# open_stack_cm_cluster_router_extra_route.graphql
#
# 클러스터 네트워크 추가 라우트
type OpenStackCmClusterRouterExtraRoute {
  # 클러스터 네트워크 라우트의 ID
  id: BigInt
  # 목적지 CIDR
  destination: String
  # 목적지에 대한 Nexthop IP 주소
  nexthop: String
}

input OpenStackCmClusterRouterExtraRouteInput {
    # 클러스터 네트워크 라우트의 ID
    id: BigInt
    # 목적지 CIDR
    destination: String
    # 목적지에 대한 Nexthop IP 주소
    nexthop: String
}

#
# open_stack_cm_cluster_router_state_enum.graphql
#
# 라우터 상태
enum OpenStackCmClusterRouterStateEnum {
  UP
  DOWN
}

#
# open_stack_cm_cluster_router_status_enum.graphql
#
# 라우터 상태
enum OpenStackCmClusterRouterStatusEnum {
  ACTIVE
  DOWN
  BUILD
  ERROR
}

#
# open_stack_cm_cluster_security_group.graphql
#
# 클러스터 보안그룹
type OpenStackCmClusterSecurityGroup {
  # 클러스터 보안그룹의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  # 클러스터에서의 보안그룹 ID
  uuid: String
  # 클러스터 보안그룹의 이름
  name: String
  # 클러스터 보안그룹의 설명
  description: String
}

input OpenStackCmClusterSecurityGroupInput {
    # 클러스터 보안그룹의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    # 클러스터에서의 보안그룹 ID
    uuid: String
    # 클러스터 보안그룹의 이름
    name: String
    # 클러스터 보안그룹의 설명
    description: String
}

#
# open_stack_cm_cluster_security_group_rule.graphql
#
# 클러스터 보안그룹 규칙
type OpenStackCmClusterSecurityGroupRule {
  # 클러스터 보안그룹 규칙의 ID
  id: BigInt
  remote_security_group: OpenStackCmClusterSecurityGroup
  # 클러스터에서의 보안그룹 규칙 ID
  uuid: String
  # 클러스터 보안그룹 규칙의 설명
  description: String
  ether_type: OpenStackCmClusterSecurityGroupRuleEtherTypeEnum
  # 네트워크 CIDR
  network_cidr: String
  direction: OpenStackCmClusterSecurityGroupRuleDirectionEnum
  # 포트 범위 최대 값
  port_range_max: BigInt
  # 포트 범위 최소 값
  port_range_min: BigInt
  # 프로토콜  The IP protocol can be represented by a string, an integer, or null. Valid string or integer values are any or 0, ah or 51, dccp or 33, egp or 8, esp or 50, gre or 47, icmp or 1, icmpv6 or 58, igmp or 2, ipip or 4, ipv6-encap or 41, ipv6-frag or 44, ipv6-icmp or 58, ipv6-nonxt or 59, ipv6-opts or 60, ipv6-route or 43, ospf or 89, pgm or 113, rsvp or 46, sctp or 132, tcp or 6, udp or 17, udplite or 136, vrrp or 112. Additionally, any integer value between [0-255] is also valid. The string any (or integer 0) means all IP protocols. See the constants in neutron_lib.constants for the most up-to-date list of supported strings.
  protocol: String
}

input OpenStackCmClusterSecurityGroupRuleInput {
    # 클러스터 보안그룹 규칙의 ID
    id: BigInt
    remote_security_group: OpenStackCmClusterSecurityGroupInput
    # 클러스터에서의 보안그룹 규칙 ID
    uuid: String
    # 클러스터 보안그룹 규칙의 설명
    description: String
    ether_type: OpenStackCmClusterSecurityGroupRuleEtherTypeEnum
    # 네트워크 CIDR
    network_cidr: String
    direction: OpenStackCmClusterSecurityGroupRuleDirectionEnum
    # 포트 범위 최대 값
    port_range_max: BigInt
    # 포트 범위 최소 값
    port_range_min: BigInt
    # 프로토콜  The IP protocol can be represented by a string, an integer, or null. Valid string or integer values are any or 0, ah or 51, dccp or 33, egp or 8, esp or 50, gre or 47, icmp or 1, icmpv6 or 58, igmp or 2, ipip or 4, ipv6-encap or 41, ipv6-frag or 44, ipv6-icmp or 58, ipv6-nonxt or 59, ipv6-opts or 60, ipv6-route or 43, ospf or 89, pgm or 113, rsvp or 46, sctp or 132, tcp or 6, udp or 17, udplite or 136, vrrp or 112. Additionally, any integer value between [0-255] is also valid. The string any (or integer 0) means all IP protocols. See the constants in neutron_lib.constants for the most up-to-date list of supported strings.
    protocol: String
}

#
# open_stack_cm_cluster_security_group_rule_direction_enum.graphql
#
# 방향
enum OpenStackCmClusterSecurityGroupRuleDirectionEnum {
  INGRESS
  EGRESS
}

#
# open_stack_cm_cluster_security_group_rule_ether_type_enum.graphql
#
# 이더넷 타입
enum OpenStackCmClusterSecurityGroupRuleEtherTypeEnum {
  FOUR
  SIX
}

#
# open_stack_cm_cluster_service_sync_object_code_enum.graphql
#
# 동기화 진행 상태
enum OpenStackCmClusterServiceSyncObjectCodeEnum {
  CLUSTER_HYPERVISOR_LIST_SYNC
  CLUSTER_KEYPAIR_LIST_SYNC
  CLUSTER_STORAGE_LIST_SYNC
  CLUSTER_ROUTER_LIST_SYNC
  CLUSTER_SECURITY_GROUP_LIST_SYNC
  CLUSTER_TENANT_LIST_SYNC
  CLUSTER_VOLUME_SNAPSHOT_LIST_SYNC
  CLUSTER_VOLUME_LIST_SYNC
  CLUSTER_AVAILABILITY_ZONE_LIST_SYNC
  CLUSTER_INSTANCE_LIST_SYNC
  CLUSTER_NETWORK_LIST_SYNC
}

#
# open_stack_cm_cluster_state_code_enum.graphql
#
# 클러스터 storage, compute, network 종합 상태
enum OpenStackCmClusterStateCodeEnum {
  CLUSTER_STATE_ACTIVE
  CLUSTER_STATE_INACTIVE
  CLUSTER_STATE_WARNING
  CLUSTER_STATE_LOADING
}

#
# open_stack_cm_cluster_storage.graphql
#
# 클러스터 볼륨타입
type OpenStackCmClusterStorage {
  # 클러스터 볼륨타입의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  # 클러스터에서의 볼륨타입 ID
  uuid: String
  # 클러스터 볼륨타입의 이름
  name: String
  # 클러스터 볼륨타입의 설명
  description: String
  type_code: OpenStackCmClusterStorageTypeCodeEnum
  # 클러스터 볼륨타입의 용량
  capacity_bytes: BigInt
  # 클러스터 볼륨타입의 사용량
  used_bytes: BigInt
  status: OpenStackCmClusterStorageStatusEnum
}

input OpenStackCmClusterStorageInput {
    # 클러스터 볼륨타입의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    # 클러스터에서의 볼륨타입 ID
    uuid: String
    # 클러스터 볼륨타입의 이름
    name: String
    # 클러스터 볼륨타입의 설명
    description: String
    type_code: OpenStackCmClusterStorageTypeCodeEnum
    # 클러스터 볼륨타입의 용량
    capacity_bytes: BigInt
    # 클러스터 볼륨타입의 사용량
    used_bytes: BigInt
    status: OpenStackCmClusterStorageStatusEnum
}

#
# open_stack_cm_cluster_storage_status_enum.graphql
#
# 볼륨 상태
enum OpenStackCmClusterStorageStatusEnum {
  AVAILABLE
  UNAVAILABLE
  UNKNOWN
}

#
# open_stack_cm_cluster_storage_type_code_enum.graphql
#
# 클러스터 볼륨타입의 종류
enum OpenStackCmClusterStorageTypeCodeEnum {
  OPENSTACK_STORAGE_TYPE_LVM
  OPENSTACK_STORAGE_TYPE_NFS
  OPENSTACK_STORAGE_TYPE_CEPH
  OPENSTACK_STORAGE_TYPE_UNKNOWN
}

#
# open_stack_cm_cluster_subnet.graphql
#
# 클러스터 네트워크 서브넷
type OpenStackCmClusterSubnet {
  # 클러스터 네트워크 서브넷의 ID
  id: BigInt
  # 클러스터에서의 네트워크 서브넷 ID
  uuid: String
  # 클러스터 네트워크 서브넷의 이름
  name: String
  # 클러스터 네트워크 서브넷의 설명
  description: String
  # 클러스터 네트워크 서브넷의 네트워크 CIDR
  network_cidr: String
  # DHCP 활성화 여부
  dhcp_enabled: Boolean
  # DHCP 할당 범위 목록
  dhcp_pools: [OpenStackCmClusterSubnetDhcpPool]
  # 게이트웨이 활성화 여부
  gateway_enabled: Boolean
  # 게이트웨이 주소
  gateway_ip_address: String
  ipv6_address_mode_code: OpenStackCmClusterSubnetIpv6AddressModeCodeEnum
  ipv6_ra_mode_code: OpenStackCmClusterSubnetIpv6RaModeCodeEnum
  # 클러스터 네트워크 서브넷의 Nameserver 목록
  nameservers: [OpenStackCmClusterSubnetNameserver]
}

input OpenStackCmClusterSubnetInput {
    # 클러스터 네트워크 서브넷의 ID
    id: BigInt
    # 클러스터에서의 네트워크 서브넷 ID
    uuid: String
    # 클러스터 네트워크 서브넷의 이름
    name: String
    # 클러스터 네트워크 서브넷의 설명
    description: String
    # 클러스터 네트워크 서브넷의 네트워크 CIDR
    network_cidr: String
    # DHCP 활성화 여부
    dhcp_enabled: Boolean
    # DHCP 할당 범위 목록
    dhcp_pools: [OpenStackCmClusterSubnetDhcpPoolInput]
    # 게이트웨이 활성화 여부
    gateway_enabled: Boolean
    # 게이트웨이 주소
    gateway_ip_address: String
    ipv6_address_mode_code: OpenStackCmClusterSubnetIpv6AddressModeCodeEnum
    ipv6_ra_mode_code: OpenStackCmClusterSubnetIpv6RaModeCodeEnum
    # 클러스터 네트워크 서브넷의 Nameserver 목록
    nameservers: [OpenStackCmClusterSubnetNameserverInput]
}

#
# open_stack_cm_cluster_subnet_dhcp_pool.graphql
#
# 클러스터 네트워크 서브넷의 DHCP Pool
type OpenStackCmClusterSubnetDhcpPool {
  # 클러스터 네트워크 서브넷 DHCP Pool 의 ID
  id: BigInt
  # 할당 범위 시작 주소
  start_ip_address: String
  # 할당 범위 종료 주소
  end_ip_address: String
}

input OpenStackCmClusterSubnetDhcpPoolInput {
    # 클러스터 네트워크 서브넷 DHCP Pool 의 ID
    id: BigInt
    # 할당 범위 시작 주소
    start_ip_address: String
    # 할당 범위 종료 주소
    end_ip_address: String
}

#
# open_stack_cm_cluster_subnet_ipv6_address_mode_code_enum.graphql
#
# ipv6 의 ip 주소 할당 방법
enum OpenStackCmClusterSubnetIpv6AddressModeCodeEnum {
  SLAAC
  DHCPV6_STATEFUL
  DHCPV6_STATELESS
}

#
# open_stack_cm_cluster_subnet_ipv6_ra_mode_code_enum.graphql
#
# ipv6 의 router advertisement 방법
enum OpenStackCmClusterSubnetIpv6RaModeCodeEnum {
  SLAAC
  DHCPV6_STATEFUL
  DHCPV6_STATELESS
}

#
# open_stack_cm_cluster_subnet_nameserver.graphql
#
# 클러스터 네트워크 서브넷의 Nameserver
type OpenStackCmClusterSubnetNameserver {
  # 클러스터 네트워크 서브넷 Nameserver 의 ID
  id: BigInt
  # 네임서버 주소
  nameserver: String
}

input OpenStackCmClusterSubnetNameserverInput {
    # 클러스터 네트워크 서브넷 Nameserver 의 ID
    id: BigInt
    # 네임서버 주소
    nameserver: String
}

#
# open_stack_cm_cluster_sync_completion_progress_status_enum.graphql
#
# 동기화 진행 상태
enum OpenStackCmClusterSyncCompletionProgressStatusEnum {
  WAITING
  CLUSTER_SYNC_RUNNING
  CLUSTER_SYNC_COMPLETED
  CLUSTER_SYNC_FAILED
}

#
# open_stack_cm_cluster_sync_state_enum.graphql
#
# 클러스터 동기화 상태
enum OpenStackCmClusterSyncStateEnum {
  CLUSTER_SYNC_STATE_INIT
  CLUSTER_SYNC_STATE_RUNNING
  CLUSTER_SYNC_STATE_DONE
  CLUSTER_SYNC_STATE_FAILED
  CLUSTER_SYNC_STATE_UNKNOWN
}

#
# open_stack_cm_cluster_tenant.graphql
#
# 클러스터 테넌트
type OpenStackCmClusterTenant {
  # 클러스터 테넌트의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  # 클러스터에서의 테넌트 ID
  uuid: String
  # 클러스터 테넌트의 이름
  name: String
  # 클러스터 테넌트의 설명
  description: String
  # 클러스터 테넌트 활성화 여부
  enabled: Boolean
  # 클러스터 테넌트 Quota 목록
  quotas: [OpenStackCmClusterTenantQuota]
}

input OpenStackCmClusterTenantInput {
    # 클러스터 테넌트의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    # 클러스터에서의 테넌트 ID
    uuid: String
    # 클러스터 테넌트의 이름
    name: String
    # 클러스터 테넌트의 설명
    description: String
    # 클러스터 테넌트 활성화 여부
    enabled: Boolean
    # 클러스터 테넌트 Quota 목록
    quotas: [OpenStackCmClusterTenantQuotaInput]
}

#
# open_stack_cm_cluster_tenant_quota.graphql
#
# 클러스터 테넌트 Quota
type OpenStackCmClusterTenantQuota {
  # Quota Key
  key: String
  # Quota Value
  value: BigInt
}

input OpenStackCmClusterTenantQuotaInput {
    # Quota Key
    key: String
    # Quota Value
    value: BigInt
}

#
# open_stack_cm_cluster_type_code_enum.graphql
#
# 클러스터의 종류
enum OpenStackCmClusterTypeCodeEnum {
  CLUSTER_TYPE_OPENSTACK
  CLUSTER_TYPE_OPENSHIFT
  CLUSTER_TYPE_KUBERNETES
  CLUSTER_TYPE_VMWARE
}

#
# open_stack_cm_cluster_volume.graphql
#
# 클러스터 볼륨
type OpenStackCmClusterVolume {
  # 클러스터 볼륨의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  storage: OpenStackCmClusterStorage
  # 클러스터 볼륨 스냅샷 목록
  snapshots: [OpenStackCmClusterVolumeSnapshot]
  # 클러스터에서의 볼륨 ID
  uuid: String
  # 클러스터 볼륨의 이름
  name: String
  # 클러스터 볼륨의 설명
  description: String
  # 클러스터 볼륨의 용량
  size_bytes: BigInt
  # 공유 가능 여부
  multiattach: Boolean
  # 부팅 가능 여부
  bootable: Boolean
  # 읽기 전용 볼륨 여부
  readonly: Boolean
  status: OpenStackCmClusterVolumeStatusEnum
}

input OpenStackCmClusterVolumeInput {
    # 클러스터 볼륨의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    storage: OpenStackCmClusterStorageInput
    # 클러스터 볼륨 스냅샷 목록
    snapshots: [OpenStackCmClusterVolumeSnapshotInput]
    # 클러스터에서의 볼륨 ID
    uuid: String
    # 클러스터 볼륨의 이름
    name: String
    # 클러스터 볼륨의 설명
    description: String
    # 클러스터 볼륨의 용량
    size_bytes: BigInt
    # 공유 가능 여부
    multiattach: Boolean
    # 부팅 가능 여부
    bootable: Boolean
    # 읽기 전용 볼륨 여부
    readonly: Boolean
    status: OpenStackCmClusterVolumeStatusEnum
}

#
# open_stack_cm_cluster_volume_snapshot.graphql
#
# 클러스터 볼륨 스냅샷
type OpenStackCmClusterVolumeSnapshot {
  # 클러스터 볼륨 스냅샷의 ID
  id: BigInt
  # 클러스터에서의 볼륨 스냅샷 ID
  uuid: String
  # 클러스터에서의 볼륨 그룹 스냅샷 ID
  cluster_volume_group_snapshot_uuid: String
  # 클러스터 볼륨 스냅샷의 이름
  name: String
  # 클러스터 볼륨 스냅샷의 설명
  description: String
  # 클러스터 볼륨 스냅샷의 용량
  size_bytes: BigInt
  status: OpenStackCmClusterVolumeSnapshotStatusEnum
  # 클러스터 볼륨 스냅샷 생성 일시 (Timestamp)
  created_at: BigInt
}

input OpenStackCmClusterVolumeSnapshotInput {
    # 클러스터 볼륨 스냅샷의 ID
    id: BigInt
    # 클러스터에서의 볼륨 스냅샷 ID
    uuid: String
    # 클러스터에서의 볼륨 그룹 스냅샷 ID
    cluster_volume_group_snapshot_uuid: String
    # 클러스터 볼륨 스냅샷의 이름
    name: String
    # 클러스터 볼륨 스냅샷의 설명
    description: String
    # 클러스터 볼륨 스냅샷의 용량
    size_bytes: BigInt
    status: OpenStackCmClusterVolumeSnapshotStatusEnum
    # 클러스터 볼륨 스냅샷 생성 일시 (Timestamp)
    created_at: BigInt
}

#
# open_stack_cm_cluster_volume_snapshot_status_enum.graphql
#
# 볼륨 스냅샷 상태
enum OpenStackCmClusterVolumeSnapshotStatusEnum {
  AVAILABLE
  ERROR
  CREATING
  DELETING
  ERROR_DELETING
}

#
# open_stack_cm_cluster_volume_status_enum.graphql
#
# 볼륨 상태
enum OpenStackCmClusterVolumeStatusEnum {
  AVAILABLE
  ERROR
  CREATING
  DELETING
  IN_USE
  ATTACHING
  DETACHING
  ERROR_DELETING
  MAINTENANCE
}

#
# open_stack_cm_clusters_response.graphql
#
type OpenStackCmClustersResponse {
  clusters: [OpenStackCmCluster]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmClustersResponseInput {
    clusters: [OpenStackCmClusterInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_completion.graphql
#
# 클러스터 동기화 진행된 기능 목록
type OpenStackCmCompletion {
  resource: OpenStackCmClusterServiceSyncObjectCodeEnum
  progress_status: OpenStackCmClusterSyncCompletionProgressStatusEnum
}

input OpenStackCmCompletionInput {
    resource: OpenStackCmClusterServiceSyncObjectCodeEnum
    progress_status: OpenStackCmClusterSyncCompletionProgressStatusEnum
}

#
# open_stack_cm_compute.graphql
#
# 클러스터 Compute 정보
type OpenStackCmCompute {
  # compute 이름
  binary: String
  # compute 호스트
  host: String
  # compute zone
  zone: String
  # compute 상태
  status: String
  # compute 마지막 업데이트된 시간
  last_updated: String
  # compute 상태 제외 여부
  exception: Boolean
}

input OpenStackCmComputeInput {
    # compute 이름
    binary: String
    # compute 호스트
    host: String
    # compute zone
    zone: String
    # compute 상태
    status: String
    # compute 마지막 업데이트된 시간
    last_updated: String
    # compute 상태 제외 여부
    exception: Boolean
}

#
# open_stack_cm_config_info_request.graphql
#
type OpenStackCmConfigInfoRequest {
  config: OpenStackCmClusterConfig
}

input OpenStackCmConfigInfoRequestInput {
    config: OpenStackCmClusterConfigInput
}

#
# open_stack_cm_config_info_response.graphql
#
type OpenStackCmConfigInfoResponse {
  config: OpenStackCmClusterConfig
  message: OpenStackCmMessage
}

input OpenStackCmConfigInfoResponseInput {
    config: OpenStackCmClusterConfigInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_credential_request.graphql
#
# 클러스터 인증 정보
type OpenStackCmCredentialRequest {
  # 기존 인증 정보
  old_credential: String
  # 새 인증 정보
  new_credential: String
}

input OpenStackCmCredentialRequestInput {
    # 기존 인증 정보
    old_credential: String
    # 새 인증 정보
    new_credential: String
}

#
# open_stack_cm_floating_ip_response.graphql
#
type OpenStackCmFloatingIpResponse {
  floating_ip: OpenStackCmClusterFloatingIp
  message: OpenStackCmMessage
}

input OpenStackCmFloatingIpResponseInput {
    floating_ip: OpenStackCmClusterFloatingIpInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_hypervisor_request.graphql
#
# Hypervisor 추가정보
type OpenStackCmHypervisorRequest {
  hypervisor: OpenStackCmClusterHypervisor
}

input OpenStackCmHypervisorRequestInput {
    hypervisor: OpenStackCmClusterHypervisorInput
}

#
# open_stack_cm_hypervisor_response.graphql
#
type OpenStackCmHypervisorResponse {
  hypervisor: OpenStackCmClusterHypervisor
  message: OpenStackCmMessage
}

input OpenStackCmHypervisorResponseInput {
    hypervisor: OpenStackCmClusterHypervisorInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_hypervisors_response.graphql
#
type OpenStackCmHypervisorsResponse {
  hypervisors: [OpenStackCmClusterHypervisor]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmHypervisorsResponseInput {
    hypervisors: [OpenStackCmClusterHypervisorInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_instance_response.graphql
#
type OpenStackCmInstanceResponse {
  instance: OpenStackCmClusterInstance
  message: OpenStackCmMessage
}

input OpenStackCmInstanceResponseInput {
    instance: OpenStackCmClusterInstanceInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_instance_spec_response.graphql
#
type OpenStackCmInstanceSpecResponse {
  spec: OpenStackCmClusterInstanceSpec
  message: OpenStackCmMessage
}

input OpenStackCmInstanceSpecResponseInput {
    spec: OpenStackCmClusterInstanceSpecInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_instance_specs_response.graphql
#
type OpenStackCmInstanceSpecsResponse {
  specs: [OpenStackCmClusterInstanceSpec]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmInstanceSpecsResponseInput {
    specs: [OpenStackCmClusterInstanceSpecInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_instances_response.graphql
#
type OpenStackCmInstancesResponse {
  instances: [OpenStackCmClusterInstance]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmInstancesResponseInput {
    instances: [OpenStackCmClusterInstanceInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_key_pair_response.graphql
#
type OpenStackCmKeyPairResponse {
  keypair: OpenStackCmClusterKeyPair
  message: OpenStackCmMessage
}

input OpenStackCmKeyPairResponseInput {
    keypair: OpenStackCmClusterKeyPairInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_message.graphql
#
# 메세지
type OpenStackCmMessage {
  # 메세지 코드
  code: String
  # 메세지 코드 상세 내용
  contents: String
}

input OpenStackCmMessageInput {
    # 메세지 코드
    code: String
    # 메세지 코드 상세 내용
    contents: String
}

#
# open_stack_cm_message_response.graphql
#
type OpenStackCmMessageResponse {
  message: OpenStackCmMessage
}

input OpenStackCmMessageResponseInput {
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_metadata.graphql
#
# 클러스터 동기화 상태 정보
type OpenStackCmMetadata {
  # ceph admin keyring
  admin_keyring: String
  # ceph admin 계정
  admin_client: String
  # Volume Attach 된 인스턴스가 동작하는 노드의 IP (Source 노드)
  host_ip: String
}

input OpenStackCmMetadataInput {
    # ceph admin keyring
    admin_keyring: String
    # ceph admin 계정
    admin_client: String
    # Volume Attach 된 인스턴스가 동작하는 노드의 IP (Source 노드)
    host_ip: String
}

#
# open_stack_cm_metadata_request.graphql
#
# 메타데이터
type OpenStackCmMetadataRequest {
  metadata: OpenStackCmMetadata
}

input OpenStackCmMetadataRequestInput {
    metadata: OpenStackCmMetadataInput
}

#
# open_stack_cm_metadata_response.graphql
#
type OpenStackCmMetadataResponse {
  metadata: OpenStackCmMetadata
}

input OpenStackCmMetadataResponseInput {
    metadata: OpenStackCmMetadataInput
}

#
# open_stack_cm_network.graphql
#
# 클러스터 Network 정보
type OpenStackCmNetwork {
  # network agent type
  type: String
  # network agent 이름
  binary: String
  # network agent 호스트
  host: String
  # network agent 상태
  status: String
  # network 마지막 업데이트된 시간
  last_updated: String
  # network 상태 제외 여부
  exception: Boolean
}

input OpenStackCmNetworkInput {
    # network agent type
    type: String
    # network agent 이름
    binary: String
    # network agent 호스트
    host: String
    # network agent 상태
    status: String
    # network 마지막 업데이트된 시간
    last_updated: String
    # network 상태 제외 여부
    exception: Boolean
}

#
# open_stack_cm_network_response.graphql
#
type OpenStackCmNetworkResponse {
  network: OpenStackCmClusterNetwork
  message: OpenStackCmMessage
}

input OpenStackCmNetworkResponseInput {
    network: OpenStackCmClusterNetworkInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_networks_response.graphql
#
type OpenStackCmNetworksResponse {
  networks: [OpenStackCmClusterNetwork]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmNetworksResponseInput {
    networks: [OpenStackCmClusterNetworkInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_pagination.graphql
#
# 목록조회 페이지 정보
type OpenStackCmPagination {
  # 현재 페이지
  page: BigInt
  # 전체 페이지의 수
  total_page: BigInt
  # 검색된 아이템 전체 아이템 수
  total_items: BigInt
}

input OpenStackCmPaginationInput {
    # 현재 페이지
    page: BigInt
    # 전체 페이지의 수
    total_page: BigInt
    # 검색된 아이템 전체 아이템 수
    total_items: BigInt
}

#
# open_stack_cm_public_key_response.graphql
#
type OpenStackCmPublicKeyResponse {
  key: String
  message: OpenStackCmMessage
}

input OpenStackCmPublicKeyResponseInput {
    key: String
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_router_response.graphql
#
type OpenStackCmRouterResponse {
  router: OpenStackCmClusterRouter
  message: OpenStackCmMessage
}

input OpenStackCmRouterResponseInput {
    router: OpenStackCmClusterRouterInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_routers_response.graphql
#
type OpenStackCmRoutersResponse {
  routers: [OpenStackCmClusterRouter]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmRoutersResponseInput {
    routers: [OpenStackCmClusterRouterInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_security_group_response.graphql
#
type OpenStackCmSecurityGroupResponse {
  security_group: OpenStackCmSecurityGroupResponseSecurityGroup
  message: OpenStackCmMessage
}

input OpenStackCmSecurityGroupResponseInput {
    security_group: OpenStackCmSecurityGroupResponseSecurityGroupInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_security_group_response_security_group.graphql
#
type OpenStackCmSecurityGroupResponseSecurityGroup {
  rules: OpenStackCmClusterSecurityGroupRule
  # 클러스터 보안그룹의 ID
  id: BigInt
  cluster: OpenStackCmCluster
  tenant: OpenStackCmClusterTenant
  # 클러스터에서의 보안그룹 ID
  uuid: String
  # 클러스터 보안그룹의 이름
  name: String
  # 클러스터 보안그룹의 설명
  description: String
}

input OpenStackCmSecurityGroupResponseSecurityGroupInput {
    rules: OpenStackCmClusterSecurityGroupRuleInput
    # 클러스터 보안그룹의 ID
    id: BigInt
    cluster: OpenStackCmClusterInput
    tenant: OpenStackCmClusterTenantInput
    # 클러스터에서의 보안그룹 ID
    uuid: String
    # 클러스터 보안그룹의 이름
    name: String
    # 클러스터 보안그룹의 설명
    description: String
}

#
# open_stack_cm_security_groups_response.graphql
#
type OpenStackCmSecurityGroupsResponse {
  security_groups: [OpenStackCmClusterSecurityGroup]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmSecurityGroupsResponseInput {
    security_groups: [OpenStackCmClusterSecurityGroupInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_storage.graphql
#
# 클러스터 Storage 정보
type OpenStackCmStorage {
  # storage 이름
  binary: String
  # storage 호스트
  backend_name: String
  # storage 호스트
  host: String
  # storage zone
  zone: String
  # storage 상태
  status: String
  # storage 마지막 업데이트된 시간
  last_updated: String
  # storage 상태 제외 여부
  exception: Boolean
}

input OpenStackCmStorageInput {
    # storage 이름
    binary: String
    # storage 호스트
    backend_name: String
    # storage 호스트
    host: String
    # storage zone
    zone: String
    # storage 상태
    status: String
    # storage 마지막 업데이트된 시간
    last_updated: String
    # storage 상태 제외 여부
    exception: Boolean
}

#
# open_stack_cm_storage_response.graphql
#
type OpenStackCmStorageResponse {
  storage: OpenStackCmClusterStorage
  message: OpenStackCmMessage
}

input OpenStackCmStorageResponseInput {
    storage: OpenStackCmClusterStorageInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_storages_response.graphql
#
type OpenStackCmStoragesResponse {
  storages: [OpenStackCmClusterStorage]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmStoragesResponseInput {
    storages: [OpenStackCmClusterStorageInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_subnet_response.graphql
#
type OpenStackCmSubnetResponse {
  subnet: OpenStackCmClusterSubnet
  message: OpenStackCmMessage
}

input OpenStackCmSubnetResponseInput {
    subnet: OpenStackCmClusterSubnetInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_sync_cluster_status_response.graphql
#
type OpenStackCmSyncClusterStatusResponse {
  # 클러스터 ID
  id: BigInt
  status: OpenStackCmClusterSyncStateEnum
  # 클러스터 동기화 진행도
  progress: BigInt
  # 클러스터 동기화 진행된 기능 목록
  completion: [OpenStackCmCompletion]
  reasons: OpenStackCmMessage
}

input OpenStackCmSyncClusterStatusResponseInput {
    # 클러스터 ID
    id: BigInt
    status: OpenStackCmClusterSyncStateEnum
    # 클러스터 동기화 진행도
    progress: BigInt
    # 클러스터 동기화 진행된 기능 목록
    completion: [OpenStackCmCompletionInput]
    reasons: OpenStackCmMessageInput
}

#
# open_stack_cm_sync_exception_info_request.graphql
#
# 클러스터 상태 결과 예외 대상
type OpenStackCmSyncExceptionInfoRequest {
  storages: [OpenStackCmStorage]
  computes: [OpenStackCmCompute]
  networks: [OpenStackCmNetwork]
}

input OpenStackCmSyncExceptionInfoRequestInput {
    storages: [OpenStackCmStorageInput]
    computes: [OpenStackCmComputeInput]
    networks: [OpenStackCmNetworkInput]
}

#
# open_stack_cm_tenant_response.graphql
#
type OpenStackCmTenantResponse {
  tenant: OpenStackCmClusterTenant
  message: OpenStackCmMessage
}

input OpenStackCmTenantResponseInput {
    tenant: OpenStackCmClusterTenantInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_tenants_response.graphql
#
type OpenStackCmTenantsResponse {
  tenants: [OpenStackCmClusterTenant]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmTenantsResponseInput {
    tenants: [OpenStackCmClusterTenantInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_user_script_request.graphql
#
# 인스턴스의 User Script
type OpenStackCmUserScriptRequest {
  # User Script 데이터
  user_data: String
}

input OpenStackCmUserScriptRequestInput {
    # User Script 데이터
    user_data: String
}

#
# open_stack_cm_user_script_response.graphql
#
type OpenStackCmUserScriptResponse {
  # User Script 데이터
  user_data: String
  message: OpenStackCmMessage
}

input OpenStackCmUserScriptResponseInput {
    # User Script 데이터
    user_data: String
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_volume_response.graphql
#
type OpenStackCmVolumeResponse {
  volume: OpenStackCmClusterVolume
  message: OpenStackCmMessage
}

input OpenStackCmVolumeResponseInput {
    volume: OpenStackCmClusterVolumeInput
    message: OpenStackCmMessageInput
}

#
# open_stack_cm_volumes_response.graphql
#
type OpenStackCmVolumesResponse {
  volumes: [OpenStackCmClusterVolume]
  pagination: OpenStackCmPagination
  message: OpenStackCmMessage
}

input OpenStackCmVolumesResponseInput {
    volumes: [OpenStackCmClusterVolumeInput]
    pagination: OpenStackCmPaginationInput
    message: OpenStackCmMessageInput
}

