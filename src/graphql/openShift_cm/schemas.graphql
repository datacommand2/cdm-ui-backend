scalar JSONObject

scalar BigInt

type Query {
  # 클러스터 조회
  # @param Int clusterId 클러스터 ID
  # @return [OpenShiftCmClusterResponse]
  GetCluster(clusterId: BigInt): OpenShiftCmClusterResponse
  # 클러스터 목록 조회
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param OpenShiftCmClusterTypeCodeEnum typeCode 클러스터 종류
  # @param Int ownerGroupId Owner 그룹 ID
  # @return [OpenShiftCmClustersResponse]
  GetClusters(limit: BigInt, offset: BigInt, typeCode: OpenShiftCmClusterTypeCodeEnum, ownerGroupId: BigInt): OpenShiftCmClustersResponse
  # 클러스터 CRD 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmCrdsResponse]
  GetCrds(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmCrdsResponse
  # 클러스터 finalizer 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @param String resourceGroup finalizer 가 선언된 리소스의 group
  # @param String resourceVersion finalizer 가 선언된 리소스의 version
  # @param String resourceKind finalizer 가 선언된 리소스의 kind
  # @return [OpenShiftCmFinalizersResponse]
  GetFinalizers(clusterId: BigInt, limit: BigInt, offset: BigInt, resourceGroup: String, resourceVersion: String, resourceKind: String): OpenShiftCmFinalizersResponse
  # 클러스터 네임스페이스 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmNamespacesResponse]
  GetNamespaces(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmNamespacesResponse
  # 클러스터 노드 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param String role 클러스터 노드의 role
  # @param String region 클러스터 노드의 region
  # @param String zone 클러스터 노드의 zone
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmNodesResponse]
  GetNodes(clusterId: BigInt, role: String, region: String, zone: String, limit: BigInt, offset: BigInt): OpenShiftCmNodesResponse
  # 클러스터 priority class 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmPriorityClassesResponse]
  GetPriorityClasses(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmPriorityClassesResponse
  # 보호 그룹 조회
  # @param Int clusterId 클러스터 ID
  # @param String protectionGroupResourceName 보호 그룹 CR 의 리소스 이름
  # @return [OpenShiftCmProtectionGroupResponse]
  GetProtectionGroup(clusterId: BigInt, protectionGroupResourceName: String): OpenShiftCmProtectionGroupResponse
  # 보호 그룹 info 조회
  # @param Int clusterId 클러스터 ID
  # @param String protectionGroupResourceName 보호 그룹 CR 의 리소스 이름
  # @return [OpenShiftCmProtectionGroupInfoResponse]
  GetProtectionGroupInfo(clusterId: BigInt, protectionGroupResourceName: String): OpenShiftCmProtectionGroupInfoResponse
  # 보호 그룹의 워크로드 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param String protectionGroupResourceName 보호 그룹 CR 의 리소스 이름
  # @return [OpenShiftCmProtectionGroupWorkloadsResponse]
  GetProtectionGroupWorkloads(clusterId: BigInt, protectionGroupResourceName: String): OpenShiftCmProtectionGroupWorkloadsResponse
  # 보호 그룹 목록 조회
  # @param Int clusterId 클러스터 ID
  # @return [OpenShiftCmProtectionGroupsResponse]
  GetProtectionGroups(clusterId: BigInt): OpenShiftCmProtectionGroupsResponse
  # 공개키 조회
  # @return [OpenShiftCmPublicKeyResponse]
  GetPublicKey: OpenShiftCmPublicKeyResponse
  # 클러스터 레지스트리 목록조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmRegistriesResponse]
  GetRegistries(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmRegistriesResponse
  # 클러스터 리소스 조회
  # @param Int clusterId 클러스터 ID
  # @param Int resourceId 클러스터 리소스의 ID
  # @return [OpenShiftCmResourceResponse]
  GetResource(clusterId: BigInt, resourceId: BigInt): OpenShiftCmResourceResponse
  # 리소스 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param String namespace 워크로드의 네임스페이스
  # @param String group 클러스터 리소스의 group
  # @param String version 클러스터 리소스의 version
  # @param String kind 클러스터 리소스의 kind
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmResourcesResponse]
  GetResources(clusterId: BigInt, namespace: String, group: String, version: String, kind: String, limit: BigInt, offset: BigInt): OpenShiftCmResourcesResponse
  # 클러스터 runtime class 목록조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmRuntimeClassesResponse]
  GetRuntimeClasses(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmRuntimeClassesResponse
  # 클러스터 스케줄러 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmSchedulersResponse]
  GetSchedulers(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmSchedulersResponse
  # 클러스터 service accounts 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmServiceAccountsResponse]
  GetServiceAccounts(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmServiceAccountsResponse
  # 배포 가능한 status-manager(agent, broker) 버전 정보 조회
  # @return [OpenShiftCmStatusManagerVersionsResponse]
  GetStatusManagerVersions: OpenShiftCmStatusManagerVersionsResponse
  # 클러스터 스토리지 클래스 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmStorageClassesResponse]
  GetStorageClasses(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmStorageClassesResponse
  # 클러스터 볼륨 조회
  # @param Int clusterId 클러스터 ID
  # @param Int volumeId 클러스터 볼륨의 ID
  # @return [OpenShiftCmVolumeResponse]
  GetVolume(clusterId: BigInt, volumeId: BigInt): OpenShiftCmVolumeResponse
  # 클러스터 볼륨 스냅샷 클래스 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmVolumeSnapshotClassesResponse]
  GetVolumeSnapshotClasses(clusterId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmVolumeSnapshotClassesResponse
  # 클러스터 볼륨 스냅샷 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param Int volumeId 클러스터 볼륨의 ID
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmVolumeSnapshotsResponse]
  GetVolumeSnapshots(clusterId: BigInt, volumeId: BigInt, limit: BigInt, offset: BigInt): OpenShiftCmVolumeSnapshotsResponse
  # 클러스터 볼륨 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param String volumeType 클러스터 볼륨의 유형
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmVolumesResponse]
  GetVolumes(clusterId: BigInt, volumeType: String, limit: BigInt, offset: BigInt): OpenShiftCmVolumesResponse
  # 클러스터 워크로드 조회
  # @param Int clusterId 클러스터 ID
  # @param Int workloadId 워크로드의 ID
  # @return [OpenShiftCmWorkloadResponse]
  GetWorkload(clusterId: BigInt, workloadId: BigInt): OpenShiftCmWorkloadResponse
  # 클러스터 워크로드 목록 조회
  # @param Int clusterId 클러스터 ID
  # @param String namespace 워크로드의 네임스페이스
  # @param Boolean isProtected 보호 그룹에 포함 여부
  # @param String name 워크로드 이름
  # @param Int limit 한 페이지에 표시할 항목 개수
  # @param Int offset 페이지에 표시할 항목 인덱스
  # @return [OpenShiftCmWorkloadsResponse]
  GetWorkloads(clusterId: BigInt, namespace: String, isProtected: Boolean, name: String, limit: BigInt, offset: BigInt): OpenShiftCmWorkloadsResponse
}

type Mutation {
  # status_manager(broker) 연결 확인
  # @param OpenShiftCmConnectionCheckRequest openShiftCmConnectionCheckRequest
  # @return [Boolean]
  CheckClusterConnection(input: CheckClusterConnectionInput): Boolean
  # 클러스터 등록
  # @param OpenShiftCmClusterRequest openShiftCmClusterRequest
  # @return [OpenShiftCmClusterCreationResponse]
  CreateCluster(input: CreateClusterInput): OpenShiftCmClusterCreationResponse
  # 보호 그룹 추가
  # @param Int clusterId 클러스터 ID
  # @param OpenShiftCmProtectionGroupRequest openShiftCmProtectionGroupRequest
  # @return [OpenShiftCmProtectionGroupResponse]
  CreateProtectionGroup(input: CreateProtectionGroupInput): OpenShiftCmProtectionGroupResponse
  # 설명 추가
  # @param Int clusterId 클러스터 ID
  # @param Boolean statusManagerDeletion status_manager(agent, broker) 삭제 여부
  # @return [Boolean]
  DeleteCluster(input: DeleteClusterInput): Boolean
  # 보호 그룹 삭제
  # @param Int clusterId 클러스터 ID
  # @param String protectionGroupResourceName 보호 그룹 CR 의 리소스 이름
  # @return [Boolean]
  DeleteProtectionGroup(input: DeleteProtectionGroupInput): Boolean
  # 클러스터 동기화
  # @param Int clusterId 클러스터 ID
  # @return [Boolean]
  PostClusterSync(input: PostClusterSyncInput): Boolean
  # status-manager(agent, broker) 설치
  # @param Int clusterId 클러스터 ID
  # @param OpenShiftCmStatusManagerInstallationRequest openShiftCmStatusManagerInstallationRequest
  # @return [OpenShiftCmStatusManagerResponse]
  PostStatusManager(input: PostStatusManagerInput): OpenShiftCmStatusManagerResponse
  # status-manager(agent, broker) 설치 제거
  # @param Int clusterId 클러스터 ID
  # @return [Boolean]
  UninstallStatusManager(input: UninstallStatusManagerInput): Boolean
  # 클러스터 수정
  # @param Int clusterId 클러스터 ID
  # @param OpenShiftCmClusterRequest openShiftCmClusterRequest
  # @return [OpenShiftCmClusterPatchResponse]
  UpdateCluster(input: UpdateClusterInput): OpenShiftCmClusterPatchResponse
  # 클러스터 CRD controller 등록
  # @param Int clusterId 클러스터 ID
  # @param Int customResourceDefinitionResourceId 클러스터 CRD의 ID
  # @param OpenShiftDrCrdRequest openShiftDrCrdRequest
  # @return [OpenShiftCmCrdResponse]
  UpdateCrdController(input: UpdateCrdControllerInput): OpenShiftCmCrdResponse
  # 클러스터 finalizer controller 등록
  # @param Int clusterId 클러스터 ID
  # @param Int finalizerId finalizer 의 ID
  # @param OpenShiftCmFinalizerRequest openShiftCmFinalizerRequest
  # @return [OpenShiftCmFinalizerResponse]
  UpdateFinalizerController(input: UpdateFinalizerControllerInput): OpenShiftCmFinalizerResponse
  # 보호 그룹 수정
  # @param Int clusterId 클러스터 ID
  # @param String protectionGroupResourceName 보호 그룹 CR 의 리소스 이름
  # @param OpenShiftCmProtectionGroupRequest openShiftCmProtectionGroupRequest
  # @return [OpenShiftCmProtectionGroupResponse]
  UpdateProtectionGroup(input: UpdateProtectionGroupInput): OpenShiftCmProtectionGroupResponse
  # 클러스터 레지스트리 수정
  # @param Int clusterId 클러스터 ID
  # @param Int registryId 레지스트리의 ID
  # @param OpenShiftCmRegistryRequest openShiftCmRegistryRequest
  # @return [OpenShiftCmRegistryResponse]
  UpdateRegistry(input: UpdateRegistryInput): OpenShiftCmRegistryResponse
  # 클러스터 스케줄러 workload 등록
  # @param Int clusterId 클러스터 ID
  # @param Int schedulerId 클러스터 스케줄러의 ID
  # @param OpenShiftCmSchedulerRequest openShiftCmSchedulerRequest
  # @return [OpenShiftCmSchedulerResponse]
  UpdateSchedulerWorkload(input: UpdateSchedulerWorkloadInput): OpenShiftCmSchedulerResponse
  # status-manager(agent, broker) 정보 수정
  # @param Int clusterId 클러스터 ID
  # @param OpenShiftCmStatusManagerRequest openShiftCmStatusManagerRequest
  # @return [OpenShiftCmStatusManagerResponse]
  UpdateStatusManager(input: UpdateStatusManagerInput): OpenShiftCmStatusManagerResponse
  # 클러스터 워크로드 수정
  # @param Int clusterId 클러스터 ID
  # @param Int workloadId 워크로드의 ID
  # @param OpenShiftCmWorkloadRequest openShiftCmWorkloadRequest
  # @return [OpenShiftCmWorkloadResponse]
  UpdateWorkload(input: UpdateWorkloadInput): OpenShiftCmWorkloadResponse
  # 클러스터 인증 확인
  # @param OpenShiftCmVerificationCredential openShiftCmVerificationCredential
  # @return [Boolean]
  VerifyClusterCredential(input: VerifyClusterCredentialInput): Boolean
}

# cluster_manager_api
input CheckClusterConnectionInput {
    openShiftCmConnectionCheckRequest: OpenShiftCmConnectionCheckRequestInput
}

input CreateClusterInput {
    openShiftCmClusterRequest: OpenShiftCmClusterRequestInput
}

input CreateProtectionGroupInput {
    # 클러스터 ID
    clusterId: BigInt,
    openShiftCmProtectionGroupRequest: OpenShiftCmProtectionGroupRequestInput
}

input DeleteClusterInput {
    # 클러스터 ID
    clusterId: BigInt,
    # status_manager(agent, broker) 삭제 여부
    statusManagerDeletion: Boolean
}

input DeleteProtectionGroupInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 보호 그룹 CR 의 리소스 이름
    protectionGroupResourceName: String
}

input PostClusterSyncInput {
    # 클러스터 ID
    clusterId: BigInt
}

input PostStatusManagerInput {
    # 클러스터 ID
    clusterId: BigInt,
    openShiftCmStatusManagerInstallationRequest: OpenShiftCmStatusManagerInstallationRequestInput
}

input UninstallStatusManagerInput {
    # 클러스터 ID
    clusterId: BigInt
}

input UpdateClusterInput {
    # 클러스터 ID
    clusterId: BigInt,
    openShiftCmClusterRequest: OpenShiftCmClusterRequestInput
}

input UpdateCrdControllerInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터 CRD의 ID
    customResourceDefinitionResourceId: BigInt,
    openShiftDrCrdRequest: OpenShiftDrCrdRequestInput
}

input UpdateFinalizerControllerInput {
    # 클러스터 ID
    clusterId: BigInt,
    # finalizer 의 ID
    finalizerId: BigInt,
    openShiftCmFinalizerRequest: OpenShiftCmFinalizerRequestInput
}

input UpdateProtectionGroupInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 보호 그룹 CR 의 리소스 이름
    protectionGroupResourceName: String,
    openShiftCmProtectionGroupRequest: OpenShiftCmProtectionGroupRequestInput
}

input UpdateRegistryInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 레지스트리의 ID
    registryId: BigInt,
    openShiftCmRegistryRequest: OpenShiftCmRegistryRequestInput
}

input UpdateSchedulerWorkloadInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 클러스터 스케줄러의 ID
    schedulerId: BigInt,
    openShiftCmSchedulerRequest: OpenShiftCmSchedulerRequestInput
}

input UpdateStatusManagerInput {
    # 클러스터 ID
    clusterId: BigInt,
    openShiftCmStatusManagerRequest: OpenShiftCmStatusManagerRequestInput
}

input UpdateWorkloadInput {
    # 클러스터 ID
    clusterId: BigInt,
    # 워크로드의 ID
    workloadId: BigInt,
    openShiftCmWorkloadRequest: OpenShiftCmWorkloadRequestInput
}

input VerifyClusterCredentialInput {
    openShiftCmVerificationCredential: OpenShiftCmVerificationCredentialInput
}

#
# cloud_language_set_enum.graphql
#
# 언어셋
enum CloudLanguageSetEnum {
  ENG
  KOR
}

#
# cloud_role.graphql
#
# 솔루션 역할
type CloudRole {
  # 솔루션 역할의 ID
  id: BigInt
  # 솔루션 이름
  solution: String
  role: CloudRoleEnum
}

input CloudRoleInput {
    # 솔루션 역할의 ID
    id: BigInt
    # 솔루션 이름
    solution: String
    role: CloudRoleEnum
}

#
# cloud_role_enum.graphql
#
# 역할
enum CloudRoleEnum {
  ADMIN
  MANAGER
  OPERATOR
  USER
}

#
# cloud_session.graphql
#
# 사용자 세션
type CloudSession {
  # 세션 키
  key: String
}

input CloudSessionInput {
    # 세션 키
    key: String
}

#
# cloud_tenant.graphql
#
# 테넌트
type CloudTenant {
  # 테넌트 ID
  id: BigInt
  # 테넌트 이름
  name: String
  # 사용여부
  use_flag: Boolean
  # 테넌트가 사용할 수 있는 솔루션 목록
  solutions: [CloudTenantSolution]
  # 비고
  remarks: String
  # 테넌트 생성 날짜
  created_at: BigInt
  # 테넌트 변경 날짜
  updated_at: BigInt
}

input CloudTenantInput {
    # 테넌트 ID
    id: BigInt
    # 테넌트 이름
    name: String
    # 사용여부
    use_flag: Boolean
    # 테넌트가 사용할 수 있는 솔루션 목록
    solutions: [CloudTenantSolutionInput]
    # 비고
    remarks: String
    # 테넌트 생성 날짜
    created_at: BigInt
    # 테넌트 변경 날짜
    updated_at: BigInt
}

#
# cloud_tenant_solution.graphql
#
# 테넌트
type CloudTenantSolution {
  # 솔루션 이름
  name: String
}

input CloudTenantSolutionInput {
    # 솔루션 이름
    name: String
}

#
# cloud_user.graphql
#
# 사용자
type CloudUser {
  # 사용자 ID
  id: BigInt
  # 계정 명
  account: String
  tenant: CloudTenant
  # 솔루션별 역할
  roles: [CloudRole]
  # 사용자 그룹 목록
  groups: [CloudUserGroup]
  # 사용자 타임존 ([참조링크](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))
  timezone: String
  language_set: CloudLanguageSetEnum
  # 사용자 이름
  name: String
  # 사용자 부서
  department: String
  # 사용자 직책
  position: String
  # 사용자 이메일
  email: String
  # 사용자 연락처
  contact: String
  # 계정 암호 변경 날짜
  password_updated_at: BigInt
  # 계정 암호 변경 필요 여부
  password_update_flag: Boolean
  # 계정 마지막 로그인 날짜
  last_logged_in_at: BigInt
  # 계정 생성 날짜
  created_at: BigInt
  # 계정 내용 변경 날짜
  updated_at: BigInt
  session: CloudSession
}

input CloudUserInput {
    # 사용자 ID
    id: BigInt
    # 계정 명
    account: String
    tenant: CloudTenantInput
    # 솔루션별 역할
    roles: [CloudRoleInput]
    # 사용자 그룹 목록
    groups: [CloudUserGroupInput]
    # 사용자 타임존 ([참조링크](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones))
    timezone: String
    language_set: CloudLanguageSetEnum
    # 사용자 이름
    name: String
    # 사용자 부서
    department: String
    # 사용자 직책
    position: String
    # 사용자 이메일
    email: String
    # 사용자 연락처
    contact: String
    # 계정 암호 변경 날짜
    password_updated_at: BigInt
    # 계정 암호 변경 필요 여부
    password_update_flag: Boolean
    # 계정 마지막 로그인 날짜
    last_logged_in_at: BigInt
    # 계정 생성 날짜
    created_at: BigInt
    # 계정 내용 변경 날짜
    updated_at: BigInt
    session: CloudSessionInput
}

#
# cloud_user_group.graphql
#
# 사용자 그룹
type CloudUserGroup {
  # 사용자 그룹 ID
  id: BigInt
  tenant: CloudTenant
  # 사용자 그룹 이름
  name: String
  # 비고
  remarks: String
  # 사용자 그룹 생성 날짜
  created_at: BigInt
  # 사용자 그룹 변경 날짜
  updated_at: BigInt
  # 삭제 여부
  delete_flag: Boolean
}

input CloudUserGroupInput {
    # 사용자 그룹 ID
    id: BigInt
    tenant: CloudTenantInput
    # 사용자 그룹 이름
    name: String
    # 비고
    remarks: String
    # 사용자 그룹 생성 날짜
    created_at: BigInt
    # 사용자 그룹 변경 날짜
    updated_at: BigInt
    # 삭제 여부
    delete_flag: Boolean
}

#
# open_shift_cm_cluster.graphql
#
# 클러스터
type OpenShiftCmCluster {
  # 클러스터의 ID
  id: BigInt
  owner_group: CloudUserGroup
  # 클러스터 이름
  name: String
  # 비고
  remarks: String
  # 클러스터 버전 정보
  version: String
  type_code: OpenShiftCmClusterTypeCodeEnum
  # ### 클러스터 API server credential  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성:   - `method`: 인증 방식   - kubeConfig - `kubeConfig`: (method 가 kubeConfig 인 경우) \"kube config text...\" > v1.0 에서는 `kubeConfig` 방식만 지원
  credential: String
  status: OpenShiftCmClusterStatus
  sync_status: OpenShiftCmClusterSyncStatus
  # 클러스터 등록 일시 (Unix timestamp)
  created_at: BigInt
  # 클러스터 수정 일시 (Unix timestamp)
  updated_at: BigInt
  # 클러스터 동기화 일시 (Unix timestamp)
  synchronized_at: BigInt
}

input OpenShiftCmClusterInput {
    # 클러스터의 ID
    id: BigInt
    owner_group: CloudUserGroupInput
    # 클러스터 이름
    name: String
    # 비고
    remarks: String
    # 클러스터 버전 정보
    version: String
    type_code: OpenShiftCmClusterTypeCodeEnum
    # ### 클러스터 API server credential  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성:   - `method`: 인증 방식   - kubeConfig - `kubeConfig`: (method 가 kubeConfig 인 경우) \"kube config text...\" > v1.0 에서는 `kubeConfig` 방식만 지원
    credential: String
    status: OpenShiftCmClusterStatusInput
    sync_status: OpenShiftCmClusterSyncStatusInput
    # 클러스터 등록 일시 (Unix timestamp)
    created_at: BigInt
    # 클러스터 수정 일시 (Unix timestamp)
    updated_at: BigInt
    # 클러스터 동기화 일시 (Unix timestamp)
    synchronized_at: BigInt
}

#
# open_shift_cm_cluster_creation_response.graphql
#
type OpenShiftCmClusterCreationResponse {
  cluster: OpenShiftCmCluster
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmClusterCreationResponseInput {
    cluster: OpenShiftCmClusterInput
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_cluster_node_address_type_enum.graphql
#
# 노드 address 타입 Hostname: Hostname InternalIP: BigInternalIP ExternalIP: ExternalIP InternalDNS: BigInternalDNS ExternalDNS: ExternalDNS
enum OpenShiftCmClusterNodeAddressTypeEnum {
  HOSTNAME
  INTERNALIP
  EXTERNALIP
  INTERNALDNS
  EXTERNALDNS
}

#
# open_shift_cm_cluster_patch_response.graphql
#
type OpenShiftCmClusterPatchResponse {
  cluster: OpenShiftCmCluster
}

input OpenShiftCmClusterPatchResponseInput {
    cluster: OpenShiftCmClusterInput
}

#
# open_shift_cm_cluster_request.graphql
#
type OpenShiftCmClusterRequest {
  cluster: OpenShiftCmCluster
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmClusterRequestInput {
    cluster: OpenShiftCmClusterInput
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_cluster_resource_service_type_enum.graphql
#
# 서비스 리소스의 유형 ClusterIP: ClusterIP NodePort: NodePort LoadBalancer: LoadBalancer ExternalName: ExternalName
enum OpenShiftCmClusterResourceServiceTypeEnum {
  CLUSTERIP
  NODEPORT
  LOADBALANCER
  EXTERNALNAME
}

#
# open_shift_cm_cluster_resource_volume_type_enum.graphql
#
# 클러스터 볼륨 유형 hostPath: hostPath emptyDir: emptyDir gcePersistentDisk: gcePersistentDisk awsElasticBlockStore: awsElasticBlockStore gitRepo: gitRepo nfs: nfs iscsi: iscsi glusterfs: glusterfs persistentVolumeClaim: persistentVolumeClaim rbd: rbd flexVolume: flexVolume cinder: cinder cephfs: cephfs flocker: flocker fc: fc azureFile: azureFile configMap: configMap vsphereVolume: vsphereVolume quobyte: quobyte azureDisk: azureDisk photonPersistentDisk: photonPersistentDisk portworxVolume: portworxVolume scaleIO: scaleIO storageos: storageos csi: csi ephemeral: ephemeral
enum OpenShiftCmClusterResourceVolumeTypeEnum {
  HOST_PATH
  EMPTY_DIR
  GCE_PERSISTENT_DISK
  AWS_ELASTIC_BLOCK_STORE
  GIT_REPO
  NFS
  ISCSI
  GLUSTERFS
  PERSISTENT_VOLUME_CLAIM
  RBD
  FLEX_VOLUME
  CINDER
  CEPHFS
  FLOCKER
  FC
  AZURE_FILE
  CONFIG_MAP
  VSPHERE_VOLUME
  QUOBYTE
  AZURE_DISK
  PHOTON_PERSISTENT_DISK
  PORTWORX_VOLUME
  SCALE_I_O
  STORAGEOS
  CSI
  EPHEMERAL
}

#
# open_shift_cm_cluster_response.graphql
#
type OpenShiftCmClusterResponse {
  cluster: OpenShiftCmCluster
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmClusterResponseInput {
    cluster: OpenShiftCmClusterInput
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_cluster_state_code_enum.graphql
#
# 클러스터의 상태 코드 cluster.state.unknown: 알 수 없음 cluster.state.active: 활성 cluster.state.inactive: 비활성
enum OpenShiftCmClusterStateCodeEnum {
  CLUSTER_STATE_UNKNOWN
  CLUSTER_STATE_ACTIVE
  CLUSTER_STATE_INACTIVE
}

#
# open_shift_cm_cluster_status.graphql
#
# 클러스터의 상태
type OpenShiftCmClusterStatus {
  state_code: OpenShiftCmClusterStateCodeEnum
  reason: OpenShiftCmMessage
}

input OpenShiftCmClusterStatusInput {
    state_code: OpenShiftCmClusterStateCodeEnum
    reason: OpenShiftCmMessageInput
}

#
# open_shift_cm_cluster_sync_state_code_enum.graphql
#
# 클러스터의 동기화 상태 코드 cluster.sync.state.unknown: 알 수 없음 cluster.sync.state.synchronizing: 동기화중 cluster.sync.state.synchronized: 동기화됨 cluster.sync.state.synchronize-failed: 동기화 실패
enum OpenShiftCmClusterSyncStateCodeEnum {
  CLUSTER_SYNC_STATE_UNKNOWN
  CLUSTER_SYNC_STATE_SYNCHRONIZING
  CLUSTER_SYNC_STATE_SYNCHRONIZED
  CLUSTER_SYNC_STATE_SYNCHRONIZE_FAILED
}

#
# open_shift_cm_cluster_sync_status.graphql
#
# 클러스터의 동기화 상태
type OpenShiftCmClusterSyncStatus {
  state_code: OpenShiftCmClusterSyncStateCodeEnum
  reason: OpenShiftCmMessage
}

input OpenShiftCmClusterSyncStatusInput {
    state_code: OpenShiftCmClusterSyncStateCodeEnum
    reason: OpenShiftCmMessageInput
}

#
# open_shift_cm_cluster_type_code_enum.graphql
#
# 클러스터 종류 cluster.type.openshift: OpenShift cluster.type.kubernetes: Kubernetes
enum OpenShiftCmClusterTypeCodeEnum {
  CLUSTER_TYPE_OPENSHIFT
  CLUSTER_TYPE_KUBERNETES
}

#
# open_shift_cm_clusters_response.graphql
#
type OpenShiftCmClustersResponse {
  clusters: [OpenShiftCmCluster]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmClustersResponseInput {
    clusters: [OpenShiftCmClusterInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_connection_check_request.graphql
#
type OpenShiftCmConnectionCheckRequest {
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmConnectionCheckRequestInput {
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_crd.graphql
#
# 클러스터 CRD
type OpenShiftCmCrd {
  # CRD의 resource id
  resource_id: BigInt
  controller_workloads: [OpenShiftCmWorkload]
}

input OpenShiftCmCrdInput {
    # CRD의 resource id
    resource_id: BigInt
    controller_workloads: [OpenShiftCmWorkloadInput]
}

#
# open_shift_cm_crd_response.graphql
#
type OpenShiftCmCrdResponse {
  custom_resource_definition: OpenShiftCmCrd
}

input OpenShiftCmCrdResponseInput {
    custom_resource_definition: OpenShiftCmCrdInput
}

#
# open_shift_cm_crds_response.graphql
#
type OpenShiftCmCrdsResponse {
  custom_resource_definitions: [OpenShiftCmCrd]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmCrdsResponseInput {
    custom_resource_definitions: [OpenShiftCmCrdInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_finalizer.graphql
#
# 클러스터 finalizer
type OpenShiftCmFinalizer {
  # finalizer 의 ID
  id: BigInt
  # finalizer 의 이름
  name: String
  # finalizer 가 명시된 resource group
  group: String
  # finalizer 가 명시된 resource version
  version: String
  # finalizer 가 명시된 resource kind
  kind: String
  controller_workload: OpenShiftCmWorkload
}

input OpenShiftCmFinalizerInput {
    # finalizer 의 ID
    id: BigInt
    # finalizer 의 이름
    name: String
    # finalizer 가 명시된 resource group
    group: String
    # finalizer 가 명시된 resource version
    version: String
    # finalizer 가 명시된 resource kind
    kind: String
    controller_workload: OpenShiftCmWorkloadInput
}

#
# open_shift_cm_finalizer_request.graphql
#
type OpenShiftCmFinalizerRequest {
  finalizer: OpenShiftCmFinalizer
}

input OpenShiftCmFinalizerRequestInput {
    finalizer: OpenShiftCmFinalizerInput
}

#
# open_shift_cm_finalizer_response.graphql
#
type OpenShiftCmFinalizerResponse {
  finalizer: OpenShiftCmFinalizer
}

input OpenShiftCmFinalizerResponseInput {
    finalizer: OpenShiftCmFinalizerInput
}

#
# open_shift_cm_finalizers_response.graphql
#
type OpenShiftCmFinalizersResponse {
  finalizers: [OpenShiftCmFinalizer]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmFinalizersResponseInput {
    finalizers: [OpenShiftCmFinalizerInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_message.graphql
#
# 메세지
type OpenShiftCmMessage {
  # 메세지 코드
  code: String
  # 메세지 코드 상세 내용
  contents: String
}

input OpenShiftCmMessageInput {
    # 메세지 코드
    code: String
    # 메세지 코드 상세 내용
    contents: String
}

#
# open_shift_cm_namespace.graphql
#
# 클러스터 네임스페이스
type OpenShiftCmNamespace {
  # 네임스페이스의 resource id
  resource_id: BigInt
  # 네임스페이스의 이름
  name: String
}

input OpenShiftCmNamespaceInput {
    # 네임스페이스의 resource id
    resource_id: BigInt
    # 네임스페이스의 이름
    name: String
}

#
# open_shift_cm_namespaces_response.graphql
#
type OpenShiftCmNamespacesResponse {
  namespaces: [OpenShiftCmNamespace]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmNamespacesResponseInput {
    namespaces: [OpenShiftCmNamespaceInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_node.graphql
#
# 클러스터 노드
type OpenShiftCmNode {
  # 노드의 resource id
  resource_id: BigInt
  # 노드의 role 정보
  roles: [String]
  # 노드의 region
  region: String
  # 노드의 zone
  zone: String
  addresses: [OpenShiftCmNodeAddress]
  # 노드의 hostname
  hostname: String
}

input OpenShiftCmNodeInput {
    # 노드의 resource id
    resource_id: BigInt
    # 노드의 role 정보
    roles: [String]
    # 노드의 region
    region: String
    # 노드의 zone
    zone: String
    addresses: [OpenShiftCmNodeAddressInput]
    # 노드의 hostname
    hostname: String
}

#
# open_shift_cm_node_address.graphql
#
# 클러스터 노드 address
type OpenShiftCmNodeAddress {
  type: OpenShiftCmClusterNodeAddressTypeEnum
  # 노드 address 정보
  address: String
}

input OpenShiftCmNodeAddressInput {
    type: OpenShiftCmClusterNodeAddressTypeEnum
    # 노드 address 정보
    address: String
}

#
# open_shift_cm_nodes_response.graphql
#
type OpenShiftCmNodesResponse {
  nodes: [OpenShiftCmNode]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmNodesResponseInput {
    nodes: [OpenShiftCmNodeInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_pagination.graphql
#
# 목록조회 페이지 정보
type OpenShiftCmPagination {
  # 현재 페이지
  page: BigInt
  # 전체 페이지의 수
  total_page: BigInt
  # 검색된 아이템 전체 아이템 수
  total_items: BigInt
}

input OpenShiftCmPaginationInput {
    # 현재 페이지
    page: BigInt
    # 전체 페이지의 수
    total_page: BigInt
    # 검색된 아이템 전체 아이템 수
    total_items: BigInt
}

#
# open_shift_cm_priority_class.graphql
#
# 클러스터의 PriorityClass
type OpenShiftCmPriorityClass {
  # PriorityClass Resource ID
  resource_id: BigInt
  # PriorityClass Name
  name: String
  # PriorityClass Value
  value: BigInt
}

input OpenShiftCmPriorityClassInput {
    # PriorityClass Resource ID
    resource_id: BigInt
    # PriorityClass Name
    name: String
    # PriorityClass Value
    value: BigInt
}

#
# open_shift_cm_priority_classes_response.graphql
#
type OpenShiftCmPriorityClassesResponse {
  priority_classes: [OpenShiftCmPriorityClass]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmPriorityClassesResponseInput {
    priority_classes: [OpenShiftCmPriorityClassInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_protection_group.graphql
#
# 보호 그룹
type OpenShiftCmProtectionGroup {
  # 보호 그룹의 보호 대상 클러스터 ID
  protection_cluster_id: BigInt
  target: OpenShiftCmProtectionGroupTargetEnum
  # (보호대상이 namespace-workloads 인 경우만 설정) 보호 대상의 namespace
  target_namespace: String
  # 보호 그룹 의 이름
  name: String
  # 보호 그룹 CR 의 리소스 이름
  resource_name: String
  # 보호 그룹 설명
  description: String
  recovery_point_objective_type: OpenShiftCmRecoveryPointObjectiveTypeEnum
  # recovery_point_objective 값은 recovery_point_objective_type 에 따라 범위가 다르다.   - `recovery.point.objective.type.minute` 10min(최소) ~ 59min(최대)   - `recovery.point.objective.type.hour` 1hour(최소) ~ 23hour(최대)   - `recovery.point.objective.type.day` 1day(최소) ~ 30day(최대)
  recovery_point_objective: BigInt
  # RTO
  recovery_time_objective: BigInt
  # 보호 대상의 워크 로드 목록
  workloads: [BigInt]
  creator: CloudUser
  # 보호 그룹 생성 일시(unix time)
  created_at: BigInt
  modifier: CloudUser
  # 보호 그룹 최종 수정 일시(unix time)
  modified_at: BigInt
}

input OpenShiftCmProtectionGroupInput {
    # 보호 그룹의 보호 대상 클러스터 ID
    protection_cluster_id: BigInt
    target: OpenShiftCmProtectionGroupTargetEnum
    # (보호대상이 namespace-workloads 인 경우만 설정) 보호 대상의 namespace
    target_namespace: String
    # 보호 그룹 의 이름
    name: String
    # 보호 그룹 CR 의 리소스 이름
    resource_name: String
    # 보호 그룹 설명
    description: String
    recovery_point_objective_type: OpenShiftCmRecoveryPointObjectiveTypeEnum
    # recovery_point_objective 값은 recovery_point_objective_type 에 따라 범위가 다르다.   - `recovery.point.objective.type.minute` 10min(최소) ~ 59min(최대)   - `recovery.point.objective.type.hour` 1hour(최소) ~ 23hour(최대)   - `recovery.point.objective.type.day` 1day(최소) ~ 30day(최대)
    recovery_point_objective: BigInt
    # RTO
    recovery_time_objective: BigInt
    # 보호 대상의 워크 로드 목록
    workloads: [BigInt]
    creator: CloudUserInput
    # 보호 그룹 생성 일시(unix time)
    created_at: BigInt
    modifier: CloudUserInput
    # 보호 그룹 최종 수정 일시(unix time)
    modified_at: BigInt
}

#
# open_shift_cm_protection_group_info.graphql
#
# 보호 그룹 info
type OpenShiftCmProtectionGroupInfo {
  # 보호 그룹 info CR 의 이름
  resource_name: String
  resources: [OpenShiftCmResource]
  # workload 정보
  workloads: [OpenShiftCmWorkload]
  namespaces: [OpenShiftCmNamespace]
  # 레지스트리 정보
  registries: [OpenShiftCmRegistry]
  # 스케줄러 정보
  schedulers: [OpenShiftCmScheduler]
  services: [OpenShiftCmService]
  runtime_classes: [OpenShiftCmRuntimeClass]
  priority_classes: [OpenShiftCmPriorityClass]
  service_accounts: [OpenShiftCmServiceAccount]
  volumes: [OpenShiftCmVolume]
  volume_snapshots: [OpenShiftCmVolumeSnapshot]
  finalizers: [OpenShiftCmFinalizer]
  readiness_gate_conditions: [String]
}

input OpenShiftCmProtectionGroupInfoInput {
    # 보호 그룹 info CR 의 이름
    resource_name: String
    resources: [OpenShiftCmResourceInput]
    # workload 정보
    workloads: [OpenShiftCmWorkloadInput]
    namespaces: [OpenShiftCmNamespaceInput]
    # 레지스트리 정보
    registries: [OpenShiftCmRegistryInput]
    # 스케줄러 정보
    schedulers: [OpenShiftCmSchedulerInput]
    services: [OpenShiftCmServiceInput]
    runtime_classes: [OpenShiftCmRuntimeClassInput]
    priority_classes: [OpenShiftCmPriorityClassInput]
    service_accounts: [OpenShiftCmServiceAccountInput]
    volumes: [OpenShiftCmVolumeInput]
    volume_snapshots: [OpenShiftCmVolumeSnapshotInput]
    finalizers: [OpenShiftCmFinalizerInput]
    readiness_gate_conditions: [String]
}

#
# open_shift_cm_protection_group_info_response.graphql
#
type OpenShiftCmProtectionGroupInfoResponse {
  protection_group_info: OpenShiftCmProtectionGroupInfo
}

input OpenShiftCmProtectionGroupInfoResponseInput {
    protection_group_info: OpenShiftCmProtectionGroupInfoInput
}

#
# open_shift_cm_protection_group_request.graphql
#
type OpenShiftCmProtectionGroupRequest {
  protection_group: OpenShiftCmProtectionGroup
}

input OpenShiftCmProtectionGroupRequestInput {
    protection_group: OpenShiftCmProtectionGroupInput
}

#
# open_shift_cm_protection_group_response.graphql
#
type OpenShiftCmProtectionGroupResponse {
  protection_cluster: OpenShiftCmCluster
  protection_group: OpenShiftCmProtectionGroup
}

input OpenShiftCmProtectionGroupResponseInput {
    protection_cluster: OpenShiftCmClusterInput
    protection_group: OpenShiftCmProtectionGroupInput
}

#
# open_shift_cm_protection_group_target_enum.graphql
#
# 보호 그릅의 보호 유형 cdm.cm-openshift.protection-group.target.cluster-workload: Cluster Workload cdm.cm-openshift.protection-group.target.namespace-workloads: Namespace Workload cdm.cm-openshift.protection-group.target.any-workloads: Any Workload
enum OpenShiftCmProtectionGroupTargetEnum {
  CDM_CM_OPENSHIFT_PROTECTION_GROUP_TARGET_CLUSTER_WORKLOAD
  CDM_CM_OPENSHIFT_PROTECTION_GROUP_TARGET_NAMESPACE_WORKLOADS
  CDM_CM_OPENSHIFT_PROTECTION_GROUP_TARGET_ANY_WORKLOADS
}

#
# open_shift_cm_protection_group_workloads_response.graphql
#
type OpenShiftCmProtectionGroupWorkloadsResponse {
  protection_group_workloads: [OpenShiftCmWorkload]
}

input OpenShiftCmProtectionGroupWorkloadsResponseInput {
    protection_group_workloads: [OpenShiftCmWorkloadInput]
}

#
# open_shift_cm_protection_groups_response.graphql
#
type OpenShiftCmProtectionGroupsResponse {
  protection_cluster: OpenShiftCmCluster
  protection_groups: [OpenShiftCmProtectionGroup]
}

input OpenShiftCmProtectionGroupsResponseInput {
    protection_cluster: OpenShiftCmClusterInput
    protection_groups: [OpenShiftCmProtectionGroupInput]
}

#
# open_shift_cm_public_key_response.graphql
#
type OpenShiftCmPublicKeyResponse {
  # 공개키
  key: String
}

input OpenShiftCmPublicKeyResponseInput {
    # 공개키
    key: String
}

#
# open_shift_cm_recovery_point_objective_type_enum.graphql
#
# RPO 시간 단위 recovery.point.objective.type.minute: 분단위 recovery.point.objective.type.hour: 시간단위 recovery.point.objective.type.day: 일단위
enum OpenShiftCmRecoveryPointObjectiveTypeEnum {
  RECOVERY_POINT_OBJECTIVE_TYPE_MINUTE
  RECOVERY_POINT_OBJECTIVE_TYPE_HOUR
  RECOVERY_POINT_OBJECTIVE_TYPE_DAY
}

#
# open_shift_cm_registries_response.graphql
#
type OpenShiftCmRegistriesResponse {
  registries: [OpenShiftCmRegistry]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmRegistriesResponseInput {
    registries: [OpenShiftCmRegistryInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_registry.graphql
#
# 클러스터 레지스트리
type OpenShiftCmRegistry {
  # 레지스트리의 ID
  id: BigInt
  # 레지스트리의 url
  url: String
  # private 레지스트리 여부
  is_private: Boolean
  # 레지스트리 push credential 필요 여부
  is_required_push_credential: Boolean
  # ### 레지스트리 push credential 정보  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성: - `registry_server_url`: registry url - `username`: username - `password`: password > v1.0 에서는 `password` 방식만 지원
  push_credential: String
  # 레지스트리의 image pull secret 리소스 목록
  image_pull_secret_resources: [OpenShiftCmResource]
}

input OpenShiftCmRegistryInput {
    # 레지스트리의 ID
    id: BigInt
    # 레지스트리의 url
    url: String
    # private 레지스트리 여부
    is_private: Boolean
    # 레지스트리 push credential 필요 여부
    is_required_push_credential: Boolean
    # ### 레지스트리 push credential 정보  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성: - `registry_server_url`: registry url - `username`: username - `password`: password > v1.0 에서는 `password` 방식만 지원
    push_credential: String
    # 레지스트리의 image pull secret 리소스 목록
    image_pull_secret_resources: [OpenShiftCmResourceInput]
}

#
# open_shift_cm_registry_request.graphql
#
type OpenShiftCmRegistryRequest {
  registry: OpenShiftCmRegistry
}

input OpenShiftCmRegistryRequestInput {
    registry: OpenShiftCmRegistryInput
}

#
# open_shift_cm_registry_response.graphql
#
type OpenShiftCmRegistryResponse {
  registry: OpenShiftCmRegistry
}

input OpenShiftCmRegistryResponseInput {
    registry: OpenShiftCmRegistryInput
}

#
# open_shift_cm_resource.graphql
#
# 클러스터 리소스
type OpenShiftCmResource {
  # 리소스의 ID
  id: BigInt
  # 리소스의 group
  group: String
  # 리소스의 version
  version: String
  # 리소스의 kind
  kind: String
  # 리소스의 네임 스페이스 이름
  namespace: String
  # 리소스의 name
  name: String
  # 리소스의 uid
  uid: String
  # 리소스의 resource version
  resource_version: String
  # 리소스의 manifest
  manifest: String
  # 리소스의 dependent 리소스 목록
  dependent_resources: [BigInt]
  # 리소스의 dependency_resources 리소스 목록
  dependency_resources: [BigInt]
}

input OpenShiftCmResourceInput {
    # 리소스의 ID
    id: BigInt
    # 리소스의 group
    group: String
    # 리소스의 version
    version: String
    # 리소스의 kind
    kind: String
    # 리소스의 네임 스페이스 이름
    namespace: String
    # 리소스의 name
    name: String
    # 리소스의 uid
    uid: String
    # 리소스의 resource version
    resource_version: String
    # 리소스의 manifest
    manifest: String
    # 리소스의 dependent 리소스 목록
    dependent_resources: [BigInt]
    # 리소스의 dependency_resources 리소스 목록
    dependency_resources: [BigInt]
}

#
# open_shift_cm_resource_response.graphql
#
type OpenShiftCmResourceResponse {
  resource: OpenShiftCmResource
}

input OpenShiftCmResourceResponseInput {
    resource: OpenShiftCmResourceInput
}

#
# open_shift_cm_resources_response.graphql
#
type OpenShiftCmResourcesResponse {
  resources: [OpenShiftCmResource]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmResourcesResponseInput {
    resources: [OpenShiftCmResourceInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_runtime_class.graphql
#
# 클러스터 runtime class
type OpenShiftCmRuntimeClass {
  # runtime class의 resource id
  resource_id: BigInt
  # runtime class의 handler
  handler: String
  # runtime class의 name
  name: String
}

input OpenShiftCmRuntimeClassInput {
    # runtime class의 resource id
    resource_id: BigInt
    # runtime class의 handler
    handler: String
    # runtime class의 name
    name: String
}

#
# open_shift_cm_runtime_classes_response.graphql
#
type OpenShiftCmRuntimeClassesResponse {
  runtime_classes: [OpenShiftCmRuntimeClass]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmRuntimeClassesResponseInput {
    runtime_classes: [OpenShiftCmRuntimeClassInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_scheduler.graphql
#
# 클러스터 스케줄러
type OpenShiftCmScheduler {
  # 스케줄러의 ID
  id: BigInt
  # 스케줄러의 이름
  name: String
  workload: OpenShiftCmWorkload
}

input OpenShiftCmSchedulerInput {
    # 스케줄러의 ID
    id: BigInt
    # 스케줄러의 이름
    name: String
    workload: OpenShiftCmWorkloadInput
}

#
# open_shift_cm_scheduler_request.graphql
#
type OpenShiftCmSchedulerRequest {
  scheduler: OpenShiftCmScheduler
}

input OpenShiftCmSchedulerRequestInput {
    scheduler: OpenShiftCmSchedulerInput
}

#
# open_shift_cm_scheduler_response.graphql
#
type OpenShiftCmSchedulerResponse {
  scheduler: OpenShiftCmScheduler
}

input OpenShiftCmSchedulerResponseInput {
    scheduler: OpenShiftCmSchedulerInput
}

#
# open_shift_cm_schedulers_response.graphql
#
type OpenShiftCmSchedulersResponse {
  schedulers: [OpenShiftCmScheduler]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmSchedulersResponseInput {
    schedulers: [OpenShiftCmSchedulerInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_service.graphql
#
# 클러스터 서비스
type OpenShiftCmService {
  # 서비스의 resource id
  resource_id: BigInt
  # 서비스의 이름
  name: String
  type: OpenShiftCmClusterResourceServiceTypeEnum
  # 서비스 유형이 cluster ip 일 경우 서비스의 cluster ip
  cluster_ip: String
  # 서비스 유형이 load balancer 일 경우 서비스의 load balancer ip
  load_balancer_ip: String
  # 서비스 유형이 load balancer 일 경우 load balance 가 동작 할 ip 범위
  load_balancer_source_ranges: [String]
  # 서비스 유형이 load balancer 일 경우 load balancer class 명
  load_balancer_class: String
  # 서비스 유형이 external name 일 경우 해당 external name
  external_name: String
}

input OpenShiftCmServiceInput {
    # 서비스의 resource id
    resource_id: BigInt
    # 서비스의 이름
    name: String
    type: OpenShiftCmClusterResourceServiceTypeEnum
    # 서비스 유형이 cluster ip 일 경우 서비스의 cluster ip
    cluster_ip: String
    # 서비스 유형이 load balancer 일 경우 서비스의 load balancer ip
    load_balancer_ip: String
    # 서비스 유형이 load balancer 일 경우 load balance 가 동작 할 ip 범위
    load_balancer_source_ranges: [String]
    # 서비스 유형이 load balancer 일 경우 load balancer class 명
    load_balancer_class: String
    # 서비스 유형이 external name 일 경우 해당 external name
    external_name: String
}

#
# open_shift_cm_service_account.graphql
#
# 클러스터의 ServiceAccount
type OpenShiftCmServiceAccount {
  # ServiceAccount Resource ID
  resource_id: BigInt
  # ServiceAccount Name
  name: String
}

input OpenShiftCmServiceAccountInput {
    # ServiceAccount Resource ID
    resource_id: BigInt
    # ServiceAccount Name
    name: String
}

#
# open_shift_cm_service_accounts_response.graphql
#
type OpenShiftCmServiceAccountsResponse {
  service_accounts: [OpenShiftCmServiceAccount]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmServiceAccountsResponseInput {
    service_accounts: [OpenShiftCmServiceAccountInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_status_manager.graphql
#
# status manager(agent, broker) 정보
type OpenShiftCmStatusManager {
  # status-manager(agent, broker) 에 접근 할 ip address
  ip_address: String
  # status-manager 의 port
  port: BigInt
  # broker 의 port
  broker_port: BigInt
  status: OpenShiftCmStatusManagerStatus
  # version 정보
  version: String
  # 최초 설치 시간(Unix timestamp)
  installed_at: BigInt
  # 최종 업그레이드 시간(Unix timestamp)
  last_upgraded_at: BigInt
}

input OpenShiftCmStatusManagerInput {
    # status-manager(agent, broker) 에 접근 할 ip address
    ip_address: String
    # status-manager 의 port
    port: BigInt
    # broker 의 port
    broker_port: BigInt
    status: OpenShiftCmStatusManagerStatusInput
    # version 정보
    version: String
    # 최초 설치 시간(Unix timestamp)
    installed_at: BigInt
    # 최종 업그레이드 시간(Unix timestamp)
    last_upgraded_at: BigInt
}

#
# open_shift_cm_status_manager_installation_request.graphql
#
type OpenShiftCmStatusManagerInstallationRequest {
  # 설치 할 status-manager(agent, broker) 버전
  version: String
}

input OpenShiftCmStatusManagerInstallationRequestInput {
    # 설치 할 status-manager(agent, broker) 버전
    version: String
}

#
# open_shift_cm_status_manager_request.graphql
#
type OpenShiftCmStatusManagerRequest {
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmStatusManagerRequestInput {
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_status_manager_response.graphql
#
type OpenShiftCmStatusManagerResponse {
  status_manager: OpenShiftCmStatusManager
}

input OpenShiftCmStatusManagerResponseInput {
    status_manager: OpenShiftCmStatusManagerInput
}

#
# open_shift_cm_status_manager_state_code_enum.graphql
#
# agent 의 상태 코드 cdm.sm-openshift.state.active: 정상 cdm.sm-openshift.state.unknown: 알 수 없음 cdm.sm-openshift.connection_failed: 연결실패 cdm.sm-openshift.state.not_installed: 설치되지 않음 cdm.sm-openshift.state.no_connection_info: 접속정보 없음 cdm.sm-openshift.state.warning: 경고
enum OpenShiftCmStatusManagerStateCodeEnum {
  CDM_SM_OPENSHIFT_STATE_ACTIVE
  CDM_SM_OPENSHIFT_STATE_UNKNOWN
  CDM_SM_OPENSHIFT_CONNECTION_FAILED
  CDM_SM_OPENSHIFT_STATE_NOT_INSTALLED
  CDM_SM_OPENSHIFT_STATE_NO_CONNECTION_INFO
  CDM_SM_OPENSHIFT_STATE_WARNING
}

#
# open_shift_cm_status_manager_status.graphql
#
# agent 의 상태
type OpenShiftCmStatusManagerStatus {
  state_code: OpenShiftCmStatusManagerStateCodeEnum
  reason: OpenShiftCmMessage
}

input OpenShiftCmStatusManagerStatusInput {
    state_code: OpenShiftCmStatusManagerStateCodeEnum
    reason: OpenShiftCmMessageInput
}

#
# open_shift_cm_status_manager_versions_response.graphql
#
type OpenShiftCmStatusManagerVersionsResponse {
  # 배포 가능한 status-manager(agent, broker) version 목록
  versions: [String]
}

input OpenShiftCmStatusManagerVersionsResponseInput {
    # 배포 가능한 status-manager(agent, broker) version 목록
    versions: [String]
}

#
# open_shift_cm_storage_class.graphql
#
# 클러스터 스토리지 클래스
type OpenShiftCmStorageClass {
  # 스토리지 클래스의 resource id
  resource_id: BigInt
  # 스토리지 클래스의 이름
  name: String
  # 스토리지 클래스의 provisioner
  provisioner: String
}

input OpenShiftCmStorageClassInput {
    # 스토리지 클래스의 resource id
    resource_id: BigInt
    # 스토리지 클래스의 이름
    name: String
    # 스토리지 클래스의 provisioner
    provisioner: String
}

#
# open_shift_cm_storage_classes_response.graphql
#
type OpenShiftCmStorageClassesResponse {
  storage_classes: [OpenShiftCmStorageClass]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmStorageClassesResponseInput {
    storage_classes: [OpenShiftCmStorageClassInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_verification_credential.graphql
#
# 클러스터 인증 정보
type OpenShiftCmVerificationCredential {
  type_code: OpenShiftCmClusterTypeCodeEnum
  # ### 클러스터 API server credential  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성:   - `method`: 인증 방식   - kubeConfig - `kubeConfig`: (method 가 kubeConfig 인 경우) \"kube config text...\" > v1.0 에서는 `kubeConfig` 방식만 지원
  credential: String
}

input OpenShiftCmVerificationCredentialInput {
    type_code: OpenShiftCmClusterTypeCodeEnum
    # ### 클러스터 API server credential  credential 은 `\"{암호화된 대칭키}.{암호화된 credential 정보}\"` 로 구성된 문자열이다.   - 대칭키는 16 바이트 랜덤 문자열로 생성하고, ClusterManager 의 공개키로 암호화(base64) - credential json 을 대칭키로 암호화(aes-cbc-256, base64)  **credential json** 의 구성:   - `method`: 인증 방식   - kubeConfig - `kubeConfig`: (method 가 kubeConfig 인 경우) \"kube config text...\" > v1.0 에서는 `kubeConfig` 방식만 지원
    credential: String
}

#
# open_shift_cm_volume.graphql
#
# 클러스터 볼륨
type OpenShiftCmVolume {
  # 볼륨의 ID
  id: BigInt
  type: OpenShiftCmClusterResourceVolumeTypeEnum
  # 클러스터 볼륨 크기
  size: String
  # 볼륨의 resource id
  resource_id: BigInt
  snapshots: [OpenShiftCmVolumeSnapshot]
}

input OpenShiftCmVolumeInput {
    # 볼륨의 ID
    id: BigInt
    type: OpenShiftCmClusterResourceVolumeTypeEnum
    # 클러스터 볼륨 크기
    size: String
    # 볼륨의 resource id
    resource_id: BigInt
    snapshots: [OpenShiftCmVolumeSnapshotInput]
}

#
# open_shift_cm_volume_response.graphql
#
type OpenShiftCmVolumeResponse {
  volume: OpenShiftCmVolume
}

input OpenShiftCmVolumeResponseInput {
    volume: OpenShiftCmVolumeInput
}

#
# open_shift_cm_volume_snapshot.graphql
#
# 클러스터 볼륨 스냅샷
type OpenShiftCmVolumeSnapshot {
  # 볼륨 스냅샷의 resource id
  resource_id: BigInt
  # 볼륨 스냅샷의 volume id
  volume_id: BigInt
  # 볼륨 스냅샷의 이름
  name: String
}

input OpenShiftCmVolumeSnapshotInput {
    # 볼륨 스냅샷의 resource id
    resource_id: BigInt
    # 볼륨 스냅샷의 volume id
    volume_id: BigInt
    # 볼륨 스냅샷의 이름
    name: String
}

#
# open_shift_cm_volume_snapshot_class.graphql
#
# 클러스터 볼륨 스냅샷 클래스
type OpenShiftCmVolumeSnapshotClass {
  # 볼륨 스냅샷 클래스의 resource id
  resource_id: BigInt
  # 볼륨 스냅샷 클래스의 이름
  name: String
  # 볼륨 스냅샷 클래스의 driver
  driver: String
}

input OpenShiftCmVolumeSnapshotClassInput {
    # 볼륨 스냅샷 클래스의 resource id
    resource_id: BigInt
    # 볼륨 스냅샷 클래스의 이름
    name: String
    # 볼륨 스냅샷 클래스의 driver
    driver: String
}

#
# open_shift_cm_volume_snapshot_classes_response.graphql
#
type OpenShiftCmVolumeSnapshotClassesResponse {
  volume_snapshot_classes: [OpenShiftCmVolumeSnapshotClass]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmVolumeSnapshotClassesResponseInput {
    volume_snapshot_classes: [OpenShiftCmVolumeSnapshotClassInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_volume_snapshots_response.graphql
#
type OpenShiftCmVolumeSnapshotsResponse {
  volume_snapshots: [OpenShiftCmVolumeSnapshot]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmVolumeSnapshotsResponseInput {
    volume_snapshots: [OpenShiftCmVolumeSnapshotInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_volumes_response.graphql
#
type OpenShiftCmVolumesResponse {
  volumes: [OpenShiftCmVolume]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmVolumesResponseInput {
    volumes: [OpenShiftCmVolumeInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_cm_workload.graphql
#
type OpenShiftCmWorkload {
  # 워크로드 리소스의 id
  id: BigInt
  # 워크로드의 네임스페이스
  namespace: String
  # 워크로드의 이름
  name: String
  # 워크로드 비고
  remarks: String
  # 워크로드의 대표 resource id
  resource_id: BigInt
  # 워크로드가 포함된 보호 그룹 리소스 이름
  protection_group_resource_name: String
  volumes: [OpenShiftCmWorkloadVolume]
  resources: [OpenShiftCmResource]
}

input OpenShiftCmWorkloadInput {
    # 워크로드 리소스의 id
    id: BigInt
    # 워크로드의 네임스페이스
    namespace: String
    # 워크로드의 이름
    name: String
    # 워크로드 비고
    remarks: String
    # 워크로드의 대표 resource id
    resource_id: BigInt
    # 워크로드가 포함된 보호 그룹 리소스 이름
    protection_group_resource_name: String
    volumes: [OpenShiftCmWorkloadVolumeInput]
    resources: [OpenShiftCmResourceInput]
}

#
# open_shift_cm_workload_request.graphql
#
type OpenShiftCmWorkloadRequest {
  workload: OpenShiftCmWorkload
}

input OpenShiftCmWorkloadRequestInput {
    workload: OpenShiftCmWorkloadInput
}

#
# open_shift_cm_workload_response.graphql
#
type OpenShiftCmWorkloadResponse {
  workload: OpenShiftCmWorkload
}

input OpenShiftCmWorkloadResponseInput {
    workload: OpenShiftCmWorkloadInput
}

#
# open_shift_cm_workload_volume.graphql
#
# 워크로드가 사용하는 Volume
type OpenShiftCmWorkloadVolume {
  volume: OpenShiftCmVolume
  # volume 이름
  name: String
}

input OpenShiftCmWorkloadVolumeInput {
    volume: OpenShiftCmVolumeInput
    # volume 이름
    name: String
}

#
# open_shift_cm_workloads_response.graphql
#
type OpenShiftCmWorkloadsResponse {
  workloads: [OpenShiftCmWorkload]
  pagination: OpenShiftCmPagination
}

input OpenShiftCmWorkloadsResponseInput {
    workloads: [OpenShiftCmWorkloadInput]
    pagination: OpenShiftCmPaginationInput
}

#
# open_shift_dr_crd_request.graphql
#
type OpenShiftDrCrdRequest {
  custom_resource_definition: OpenShiftCmCrd
}

input OpenShiftDrCrdRequestInput {
    custom_resource_definition: OpenShiftCmCrdInput
}

